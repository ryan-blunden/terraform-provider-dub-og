// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LinkErrorSchemaCode - The error code.
type LinkErrorSchemaCode string

const (
	LinkErrorSchemaCodeBadRequest          LinkErrorSchemaCode = "bad_request"
	LinkErrorSchemaCodeNotFound            LinkErrorSchemaCode = "not_found"
	LinkErrorSchemaCodeInternalServerError LinkErrorSchemaCode = "internal_server_error"
	LinkErrorSchemaCodeUnauthorized        LinkErrorSchemaCode = "unauthorized"
	LinkErrorSchemaCodeForbidden           LinkErrorSchemaCode = "forbidden"
	LinkErrorSchemaCodeRateLimitExceeded   LinkErrorSchemaCode = "rate_limit_exceeded"
	LinkErrorSchemaCodeInviteExpired       LinkErrorSchemaCode = "invite_expired"
	LinkErrorSchemaCodeInvitePending       LinkErrorSchemaCode = "invite_pending"
	LinkErrorSchemaCodeExceededLimit       LinkErrorSchemaCode = "exceeded_limit"
	LinkErrorSchemaCodeConflict            LinkErrorSchemaCode = "conflict"
	LinkErrorSchemaCodeUnprocessableEntity LinkErrorSchemaCode = "unprocessable_entity"
)

func (e LinkErrorSchemaCode) ToPointer() *LinkErrorSchemaCode {
	return &e
}
func (e *LinkErrorSchemaCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_request":
		fallthrough
	case "not_found":
		fallthrough
	case "internal_server_error":
		fallthrough
	case "unauthorized":
		fallthrough
	case "forbidden":
		fallthrough
	case "rate_limit_exceeded":
		fallthrough
	case "invite_expired":
		fallthrough
	case "invite_pending":
		fallthrough
	case "exceeded_limit":
		fallthrough
	case "conflict":
		fallthrough
	case "unprocessable_entity":
		*e = LinkErrorSchemaCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LinkErrorSchemaCode: %v", v)
	}
}

type LinkErrorSchema struct {
	// The link that caused the error.
	Link any `json:"link,omitempty"`
	// The error message.
	Error string `json:"error"`
	// The error code.
	Code LinkErrorSchemaCode `json:"code"`
}

func (o *LinkErrorSchema) GetLink() any {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *LinkErrorSchema) GetError() string {
	if o == nil {
		return ""
	}
	return o.Error
}

func (o *LinkErrorSchema) GetCode() LinkErrorSchemaCode {
	if o == nil {
		return LinkErrorSchemaCode("")
	}
	return o.Code
}
