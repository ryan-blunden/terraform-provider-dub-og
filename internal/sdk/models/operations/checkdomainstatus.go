// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/models/shared"
	"net/http"
)

type DomainsType string

const (
	DomainsTypeStr        DomainsType = "str"
	DomainsTypeArrayOfStr DomainsType = "arrayOfStr"
)

// Domains - The domains to search. We only support .link domains for now.
type Domains struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type DomainsType
}

func CreateDomainsStr(str string) Domains {
	typ := DomainsTypeStr

	return Domains{
		Str:  &str,
		Type: typ,
	}
}

func CreateDomainsArrayOfStr(arrayOfStr []string) Domains {
	typ := DomainsTypeArrayOfStr

	return Domains{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *Domains) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = DomainsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = DomainsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Domains", string(data))
}

func (u Domains) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type Domains: all fields are null")
}

type CheckDomainStatusRequest struct {
	// The domains to search. We only support .link domains for now.
	Domains Domains `queryParam:"style=form,explode=false,name=domains"`
}

func (o *CheckDomainStatusRequest) GetDomains() Domains {
	if o == nil {
		return Domains{}
	}
	return o.Domains
}

type CheckDomainStatusResponseBody struct {
	// The domain name.
	Domain string `json:"domain"`
	// Whether the domain is available.
	Available bool `json:"available"`
	// The price description.
	Price *string `json:"price"`
	// Whether the domain is a premium domain.
	Premium *bool `json:"premium"`
}

func (o *CheckDomainStatusResponseBody) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *CheckDomainStatusResponseBody) GetAvailable() bool {
	if o == nil {
		return false
	}
	return o.Available
}

func (o *CheckDomainStatusResponseBody) GetPrice() *string {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *CheckDomainStatusResponseBody) GetPremium() *bool {
	if o == nil {
		return nil
	}
	return o.Premium
}

type CheckDomainStatusResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The domain status was retrieved.
	ResponseBodies []CheckDomainStatusResponseBody
	// The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
	FourHundred *shared.FourHundred
	// Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
	FourHundredAndOne *shared.FourHundredAndOne
	// The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
	FourHundredAndThree *shared.FourHundredAndThree
	// The server cannot find the requested resource.
	FourHundredAndFour *shared.FourHundredAndFour
	// This response is sent when a request conflicts with the current state of the server.
	FourHundredAndNine *shared.FourHundredAndNine
	// This response is sent when the requested content has been permanently deleted from server, with no forwarding address.
	FourHundredAndTen *shared.FourHundredAndTen
	// The request was well-formed but was unable to be followed due to semantic errors.
	FourHundredAndTwentyTwo *shared.FourHundredAndTwentyTwo
	// The user has sent too many requests in a given amount of time ("rate limiting")
	FourHundredAndTwentyNine *shared.FourHundredAndTwentyNine
	// The server has encountered a situation it does not know how to handle.
	FiveHundred *shared.FiveHundred
}

func (o *CheckDomainStatusResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CheckDomainStatusResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CheckDomainStatusResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CheckDomainStatusResponse) GetResponseBodies() []CheckDomainStatusResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}

func (o *CheckDomainStatusResponse) GetFourHundred() *shared.FourHundred {
	if o == nil {
		return nil
	}
	return o.FourHundred
}

func (o *CheckDomainStatusResponse) GetFourHundredAndOne() *shared.FourHundredAndOne {
	if o == nil {
		return nil
	}
	return o.FourHundredAndOne
}

func (o *CheckDomainStatusResponse) GetFourHundredAndThree() *shared.FourHundredAndThree {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThree
}

func (o *CheckDomainStatusResponse) GetFourHundredAndFour() *shared.FourHundredAndFour {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFour
}

func (o *CheckDomainStatusResponse) GetFourHundredAndNine() *shared.FourHundredAndNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndNine
}

func (o *CheckDomainStatusResponse) GetFourHundredAndTen() *shared.FourHundredAndTen {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTen
}

func (o *CheckDomainStatusResponse) GetFourHundredAndTwentyTwo() *shared.FourHundredAndTwentyTwo {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyTwo
}

func (o *CheckDomainStatusResponse) GetFourHundredAndTwentyNine() *shared.FourHundredAndTwentyNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyNine
}

func (o *CheckDomainStatusResponse) GetFiveHundred() *shared.FiveHundred {
	if o == nil {
		return nil
	}
	return o.FiveHundred
}
