// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/models/shared"
	"net/http"
)

type UpdateDomainRequestBody struct {
	// Name of the domain.
	Slug *string `json:"slug,omitempty"`
	// Redirect users to a specific URL when any link under this domain has expired.
	ExpiredURL *string `json:"expiredUrl,omitempty"`
	// Redirect users to a specific URL when a link under this domain doesn't exist.
	NotFoundURL *string `json:"notFoundUrl,omitempty"`
	// Whether to archive this domain. `false` will unarchive a previously archived domain.
	Archived *bool `default:"false" json:"archived"`
	// Provide context to your teammates in the link creation modal by showing them an example of a link to be shortened.
	Placeholder *string `json:"placeholder,omitempty"`
	// The logo of the domain.
	Logo *string `json:"logo,omitempty"`
	// assetLinks.json configuration file (for deep link support on Android).
	AssetLinks *string `json:"assetLinks,omitempty"`
	// apple-app-site-association configuration file (for deep link support on iOS).
	AppleAppSiteAssociation *string `json:"appleAppSiteAssociation,omitempty"`
}

func (u UpdateDomainRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDomainRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDomainRequestBody) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateDomainRequestBody) GetExpiredURL() *string {
	if o == nil {
		return nil
	}
	return o.ExpiredURL
}

func (o *UpdateDomainRequestBody) GetNotFoundURL() *string {
	if o == nil {
		return nil
	}
	return o.NotFoundURL
}

func (o *UpdateDomainRequestBody) GetArchived() *bool {
	if o == nil {
		return nil
	}
	return o.Archived
}

func (o *UpdateDomainRequestBody) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *UpdateDomainRequestBody) GetLogo() *string {
	if o == nil {
		return nil
	}
	return o.Logo
}

func (o *UpdateDomainRequestBody) GetAssetLinks() *string {
	if o == nil {
		return nil
	}
	return o.AssetLinks
}

func (o *UpdateDomainRequestBody) GetAppleAppSiteAssociation() *string {
	if o == nil {
		return nil
	}
	return o.AppleAppSiteAssociation
}

type UpdateDomainRequest struct {
	// The domain name.
	Slug        string                   `pathParam:"style=simple,explode=false,name=slug"`
	RequestBody *UpdateDomainRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateDomainRequest) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *UpdateDomainRequest) GetRequestBody() *UpdateDomainRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdateDomainResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The domain was updated.
	DomainSchema *shared.DomainSchema
	// The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
	FourHundred *shared.FourHundred
	// Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
	FourHundredAndOne *shared.FourHundredAndOne
	// The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
	FourHundredAndThree *shared.FourHundredAndThree
	// The server cannot find the requested resource.
	FourHundredAndFour *shared.FourHundredAndFour
	// This response is sent when a request conflicts with the current state of the server.
	FourHundredAndNine *shared.FourHundredAndNine
	// This response is sent when the requested content has been permanently deleted from server, with no forwarding address.
	FourHundredAndTen *shared.FourHundredAndTen
	// The request was well-formed but was unable to be followed due to semantic errors.
	FourHundredAndTwentyTwo *shared.FourHundredAndTwentyTwo
	// The user has sent too many requests in a given amount of time ("rate limiting")
	FourHundredAndTwentyNine *shared.FourHundredAndTwentyNine
	// The server has encountered a situation it does not know how to handle.
	FiveHundred *shared.FiveHundred
}

func (o *UpdateDomainResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateDomainResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateDomainResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdateDomainResponse) GetDomainSchema() *shared.DomainSchema {
	if o == nil {
		return nil
	}
	return o.DomainSchema
}

func (o *UpdateDomainResponse) GetFourHundred() *shared.FourHundred {
	if o == nil {
		return nil
	}
	return o.FourHundred
}

func (o *UpdateDomainResponse) GetFourHundredAndOne() *shared.FourHundredAndOne {
	if o == nil {
		return nil
	}
	return o.FourHundredAndOne
}

func (o *UpdateDomainResponse) GetFourHundredAndThree() *shared.FourHundredAndThree {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThree
}

func (o *UpdateDomainResponse) GetFourHundredAndFour() *shared.FourHundredAndFour {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFour
}

func (o *UpdateDomainResponse) GetFourHundredAndNine() *shared.FourHundredAndNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndNine
}

func (o *UpdateDomainResponse) GetFourHundredAndTen() *shared.FourHundredAndTen {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTen
}

func (o *UpdateDomainResponse) GetFourHundredAndTwentyTwo() *shared.FourHundredAndTwentyTwo {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyTwo
}

func (o *UpdateDomainResponse) GetFourHundredAndTwentyNine() *shared.FourHundredAndTwentyNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyNine
}

func (o *UpdateDomainResponse) GetFiveHundred() *shared.FiveHundred {
	if o == nil {
		return nil
	}
	return o.FiveHundred
}
