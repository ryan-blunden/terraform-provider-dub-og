// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/models/shared"
	"net/http"
)

// RetrievePartnerAnalyticsInterval - The interval to retrieve analytics for. If undefined, defaults to 24h.
type RetrievePartnerAnalyticsInterval string

const (
	RetrievePartnerAnalyticsIntervalTwentyFourh RetrievePartnerAnalyticsInterval = "24h"
	RetrievePartnerAnalyticsIntervalSevend      RetrievePartnerAnalyticsInterval = "7d"
	RetrievePartnerAnalyticsIntervalThirtyd     RetrievePartnerAnalyticsInterval = "30d"
	RetrievePartnerAnalyticsIntervalNinetyd     RetrievePartnerAnalyticsInterval = "90d"
	RetrievePartnerAnalyticsIntervalOney        RetrievePartnerAnalyticsInterval = "1y"
	RetrievePartnerAnalyticsIntervalMtd         RetrievePartnerAnalyticsInterval = "mtd"
	RetrievePartnerAnalyticsIntervalQtd         RetrievePartnerAnalyticsInterval = "qtd"
	RetrievePartnerAnalyticsIntervalYtd         RetrievePartnerAnalyticsInterval = "ytd"
	RetrievePartnerAnalyticsIntervalAll         RetrievePartnerAnalyticsInterval = "all"
)

func (e RetrievePartnerAnalyticsInterval) ToPointer() *RetrievePartnerAnalyticsInterval {
	return &e
}
func (e *RetrievePartnerAnalyticsInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "24h":
		fallthrough
	case "7d":
		fallthrough
	case "30d":
		fallthrough
	case "90d":
		fallthrough
	case "1y":
		fallthrough
	case "mtd":
		fallthrough
	case "qtd":
		fallthrough
	case "ytd":
		fallthrough
	case "all":
		*e = RetrievePartnerAnalyticsInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrievePartnerAnalyticsInterval: %v", v)
	}
}

// RetrievePartnerAnalyticsGroupBy - The parameter to group the analytics data points by. Defaults to `count` if undefined.
type RetrievePartnerAnalyticsGroupBy string

const (
	RetrievePartnerAnalyticsGroupByTopLinks   RetrievePartnerAnalyticsGroupBy = "top_links"
	RetrievePartnerAnalyticsGroupByTimeseries RetrievePartnerAnalyticsGroupBy = "timeseries"
	RetrievePartnerAnalyticsGroupByCount      RetrievePartnerAnalyticsGroupBy = "count"
)

func (e RetrievePartnerAnalyticsGroupBy) ToPointer() *RetrievePartnerAnalyticsGroupBy {
	return &e
}
func (e *RetrievePartnerAnalyticsGroupBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "top_links":
		fallthrough
	case "timeseries":
		fallthrough
	case "count":
		*e = RetrievePartnerAnalyticsGroupBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrievePartnerAnalyticsGroupBy: %v", v)
	}
}

type RetrievePartnerAnalyticsRequest struct {
	// The ID of the partner to retrieve analytics for.
	PartnerID *string `queryParam:"style=form,explode=true,name=partnerId"`
	// The ID of the tenant that created the link inside your system.
	TenantID *string `queryParam:"style=form,explode=true,name=tenantId"`
	// The interval to retrieve analytics for. If undefined, defaults to 24h.
	Interval *RetrievePartnerAnalyticsInterval `queryParam:"style=form,explode=true,name=interval"`
	// The start date and time when to retrieve analytics from. If set, takes precedence over `interval`.
	Start *string `queryParam:"style=form,explode=true,name=start"`
	// The end date and time when to retrieve analytics from. If not provided, defaults to the current date. If set along with `start`, takes precedence over `interval`.
	End *string `queryParam:"style=form,explode=true,name=end"`
	// The IANA time zone code for aligning timeseries granularity (e.g. America/New_York). Defaults to UTC.
	Timezone *string `default:"UTC" queryParam:"style=form,explode=true,name=timezone"`
	// The parameter to group the analytics data points by. Defaults to `count` if undefined.
	GroupBy *RetrievePartnerAnalyticsGroupBy `default:"count" queryParam:"style=form,explode=true,name=groupBy"`
}

func (r RetrievePartnerAnalyticsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrievePartnerAnalyticsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrievePartnerAnalyticsRequest) GetPartnerID() *string {
	if o == nil {
		return nil
	}
	return o.PartnerID
}

func (o *RetrievePartnerAnalyticsRequest) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *RetrievePartnerAnalyticsRequest) GetInterval() *RetrievePartnerAnalyticsInterval {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *RetrievePartnerAnalyticsRequest) GetStart() *string {
	if o == nil {
		return nil
	}
	return o.Start
}

func (o *RetrievePartnerAnalyticsRequest) GetEnd() *string {
	if o == nil {
		return nil
	}
	return o.End
}

func (o *RetrievePartnerAnalyticsRequest) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *RetrievePartnerAnalyticsRequest) GetGroupBy() *RetrievePartnerAnalyticsGroupBy {
	if o == nil {
		return nil
	}
	return o.GroupBy
}

type RetrievePartnerAnalyticsResponseBodyType string

const (
	RetrievePartnerAnalyticsResponseBodyTypePartnerAnalyticsCount             RetrievePartnerAnalyticsResponseBodyType = "PartnerAnalyticsCount"
	RetrievePartnerAnalyticsResponseBodyTypeArrayOfPartnerAnalyticsTimeseries RetrievePartnerAnalyticsResponseBodyType = "arrayOfPartnerAnalyticsTimeseries"
	RetrievePartnerAnalyticsResponseBodyTypeArrayOfPartnerAnalyticsTopLinks   RetrievePartnerAnalyticsResponseBodyType = "arrayOfPartnerAnalyticsTopLinks"
)

// RetrievePartnerAnalyticsResponseBody - Partner analytics data
type RetrievePartnerAnalyticsResponseBody struct {
	PartnerAnalyticsCount             *shared.PartnerAnalyticsCount       `queryParam:"inline"`
	ArrayOfPartnerAnalyticsTimeseries []shared.PartnerAnalyticsTimeseries `queryParam:"inline"`
	ArrayOfPartnerAnalyticsTopLinks   []shared.PartnerAnalyticsTopLinks   `queryParam:"inline"`

	Type RetrievePartnerAnalyticsResponseBodyType
}

func CreateRetrievePartnerAnalyticsResponseBodyPartnerAnalyticsCount(partnerAnalyticsCount shared.PartnerAnalyticsCount) RetrievePartnerAnalyticsResponseBody {
	typ := RetrievePartnerAnalyticsResponseBodyTypePartnerAnalyticsCount

	return RetrievePartnerAnalyticsResponseBody{
		PartnerAnalyticsCount: &partnerAnalyticsCount,
		Type:                  typ,
	}
}

func CreateRetrievePartnerAnalyticsResponseBodyArrayOfPartnerAnalyticsTimeseries(arrayOfPartnerAnalyticsTimeseries []shared.PartnerAnalyticsTimeseries) RetrievePartnerAnalyticsResponseBody {
	typ := RetrievePartnerAnalyticsResponseBodyTypeArrayOfPartnerAnalyticsTimeseries

	return RetrievePartnerAnalyticsResponseBody{
		ArrayOfPartnerAnalyticsTimeseries: arrayOfPartnerAnalyticsTimeseries,
		Type:                              typ,
	}
}

func CreateRetrievePartnerAnalyticsResponseBodyArrayOfPartnerAnalyticsTopLinks(arrayOfPartnerAnalyticsTopLinks []shared.PartnerAnalyticsTopLinks) RetrievePartnerAnalyticsResponseBody {
	typ := RetrievePartnerAnalyticsResponseBodyTypeArrayOfPartnerAnalyticsTopLinks

	return RetrievePartnerAnalyticsResponseBody{
		ArrayOfPartnerAnalyticsTopLinks: arrayOfPartnerAnalyticsTopLinks,
		Type:                            typ,
	}
}

func (u *RetrievePartnerAnalyticsResponseBody) UnmarshalJSON(data []byte) error {

	var partnerAnalyticsCount shared.PartnerAnalyticsCount = shared.PartnerAnalyticsCount{}
	if err := utils.UnmarshalJSON(data, &partnerAnalyticsCount, "", true, true); err == nil {
		u.PartnerAnalyticsCount = &partnerAnalyticsCount
		u.Type = RetrievePartnerAnalyticsResponseBodyTypePartnerAnalyticsCount
		return nil
	}

	var arrayOfPartnerAnalyticsTimeseries []shared.PartnerAnalyticsTimeseries = []shared.PartnerAnalyticsTimeseries{}
	if err := utils.UnmarshalJSON(data, &arrayOfPartnerAnalyticsTimeseries, "", true, true); err == nil {
		u.ArrayOfPartnerAnalyticsTimeseries = arrayOfPartnerAnalyticsTimeseries
		u.Type = RetrievePartnerAnalyticsResponseBodyTypeArrayOfPartnerAnalyticsTimeseries
		return nil
	}

	var arrayOfPartnerAnalyticsTopLinks []shared.PartnerAnalyticsTopLinks = []shared.PartnerAnalyticsTopLinks{}
	if err := utils.UnmarshalJSON(data, &arrayOfPartnerAnalyticsTopLinks, "", true, true); err == nil {
		u.ArrayOfPartnerAnalyticsTopLinks = arrayOfPartnerAnalyticsTopLinks
		u.Type = RetrievePartnerAnalyticsResponseBodyTypeArrayOfPartnerAnalyticsTopLinks
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RetrievePartnerAnalyticsResponseBody", string(data))
}

func (u RetrievePartnerAnalyticsResponseBody) MarshalJSON() ([]byte, error) {
	if u.PartnerAnalyticsCount != nil {
		return utils.MarshalJSON(u.PartnerAnalyticsCount, "", true)
	}

	if u.ArrayOfPartnerAnalyticsTimeseries != nil {
		return utils.MarshalJSON(u.ArrayOfPartnerAnalyticsTimeseries, "", true)
	}

	if u.ArrayOfPartnerAnalyticsTopLinks != nil {
		return utils.MarshalJSON(u.ArrayOfPartnerAnalyticsTopLinks, "", true)
	}

	return nil, errors.New("could not marshal union type RetrievePartnerAnalyticsResponseBody: all fields are null")
}

type RetrievePartnerAnalyticsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Partner analytics data
	OneOf *RetrievePartnerAnalyticsResponseBody
	// The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
	FourHundred *shared.FourHundred
	// Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
	FourHundredAndOne *shared.FourHundredAndOne
	// The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
	FourHundredAndThree *shared.FourHundredAndThree
	// The server cannot find the requested resource.
	FourHundredAndFour *shared.FourHundredAndFour
	// This response is sent when a request conflicts with the current state of the server.
	FourHundredAndNine *shared.FourHundredAndNine
	// This response is sent when the requested content has been permanently deleted from server, with no forwarding address.
	FourHundredAndTen *shared.FourHundredAndTen
	// The request was well-formed but was unable to be followed due to semantic errors.
	FourHundredAndTwentyTwo *shared.FourHundredAndTwentyTwo
	// The user has sent too many requests in a given amount of time ("rate limiting")
	FourHundredAndTwentyNine *shared.FourHundredAndTwentyNine
	// The server has encountered a situation it does not know how to handle.
	FiveHundred *shared.FiveHundred
}

func (o *RetrievePartnerAnalyticsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RetrievePartnerAnalyticsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RetrievePartnerAnalyticsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *RetrievePartnerAnalyticsResponse) GetOneOf() *RetrievePartnerAnalyticsResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}

func (o *RetrievePartnerAnalyticsResponse) GetFourHundred() *shared.FourHundred {
	if o == nil {
		return nil
	}
	return o.FourHundred
}

func (o *RetrievePartnerAnalyticsResponse) GetFourHundredAndOne() *shared.FourHundredAndOne {
	if o == nil {
		return nil
	}
	return o.FourHundredAndOne
}

func (o *RetrievePartnerAnalyticsResponse) GetFourHundredAndThree() *shared.FourHundredAndThree {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThree
}

func (o *RetrievePartnerAnalyticsResponse) GetFourHundredAndFour() *shared.FourHundredAndFour {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFour
}

func (o *RetrievePartnerAnalyticsResponse) GetFourHundredAndNine() *shared.FourHundredAndNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndNine
}

func (o *RetrievePartnerAnalyticsResponse) GetFourHundredAndTen() *shared.FourHundredAndTen {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTen
}

func (o *RetrievePartnerAnalyticsResponse) GetFourHundredAndTwentyTwo() *shared.FourHundredAndTwentyTwo {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyTwo
}

func (o *RetrievePartnerAnalyticsResponse) GetFourHundredAndTwentyNine() *shared.FourHundredAndTwentyNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyNine
}

func (o *RetrievePartnerAnalyticsResponse) GetFiveHundred() *shared.FiveHundred {
	if o == nil {
		return nil
	}
	return o.FiveHundred
}
