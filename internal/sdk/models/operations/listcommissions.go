// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/models/shared"
	"net/http"
)

type QueryParamType string

const (
	QueryParamTypeClick  QueryParamType = "click"
	QueryParamTypeLead   QueryParamType = "lead"
	QueryParamTypeSale   QueryParamType = "sale"
	QueryParamTypeCustom QueryParamType = "custom"
)

func (e QueryParamType) ToPointer() *QueryParamType {
	return &e
}
func (e *QueryParamType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "click":
		fallthrough
	case "lead":
		fallthrough
	case "sale":
		fallthrough
	case "custom":
		*e = QueryParamType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamType: %v", v)
	}
}

// QueryParamStatus - Filter the list of commissions by their corresponding status.
type QueryParamStatus string

const (
	QueryParamStatusPending   QueryParamStatus = "pending"
	QueryParamStatusProcessed QueryParamStatus = "processed"
	QueryParamStatusPaid      QueryParamStatus = "paid"
	QueryParamStatusRefunded  QueryParamStatus = "refunded"
	QueryParamStatusDuplicate QueryParamStatus = "duplicate"
	QueryParamStatusFraud     QueryParamStatus = "fraud"
	QueryParamStatusCanceled  QueryParamStatus = "canceled"
)

func (e QueryParamStatus) ToPointer() *QueryParamStatus {
	return &e
}
func (e *QueryParamStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "processed":
		fallthrough
	case "paid":
		fallthrough
	case "refunded":
		fallthrough
	case "duplicate":
		fallthrough
	case "fraud":
		fallthrough
	case "canceled":
		*e = QueryParamStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamStatus: %v", v)
	}
}

// ListCommissionsSortBy - The field to sort the list of commissions by.
type ListCommissionsSortBy string

const (
	ListCommissionsSortByCreatedAt ListCommissionsSortBy = "createdAt"
	ListCommissionsSortByAmount    ListCommissionsSortBy = "amount"
)

func (e ListCommissionsSortBy) ToPointer() *ListCommissionsSortBy {
	return &e
}
func (e *ListCommissionsSortBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "createdAt":
		fallthrough
	case "amount":
		*e = ListCommissionsSortBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCommissionsSortBy: %v", v)
	}
}

// ListCommissionsSortOrder - The sort order for the list of commissions.
type ListCommissionsSortOrder string

const (
	ListCommissionsSortOrderAsc  ListCommissionsSortOrder = "asc"
	ListCommissionsSortOrderDesc ListCommissionsSortOrder = "desc"
)

func (e ListCommissionsSortOrder) ToPointer() *ListCommissionsSortOrder {
	return &e
}
func (e *ListCommissionsSortOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = ListCommissionsSortOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCommissionsSortOrder: %v", v)
	}
}

// ListCommissionsInterval - The interval to retrieve commissions for.
type ListCommissionsInterval string

const (
	ListCommissionsIntervalTwentyFourh ListCommissionsInterval = "24h"
	ListCommissionsIntervalSevend      ListCommissionsInterval = "7d"
	ListCommissionsIntervalThirtyd     ListCommissionsInterval = "30d"
	ListCommissionsIntervalNinetyd     ListCommissionsInterval = "90d"
	ListCommissionsIntervalOney        ListCommissionsInterval = "1y"
	ListCommissionsIntervalMtd         ListCommissionsInterval = "mtd"
	ListCommissionsIntervalQtd         ListCommissionsInterval = "qtd"
	ListCommissionsIntervalYtd         ListCommissionsInterval = "ytd"
	ListCommissionsIntervalAll         ListCommissionsInterval = "all"
)

func (e ListCommissionsInterval) ToPointer() *ListCommissionsInterval {
	return &e
}
func (e *ListCommissionsInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "24h":
		fallthrough
	case "7d":
		fallthrough
	case "30d":
		fallthrough
	case "90d":
		fallthrough
	case "1y":
		fallthrough
	case "mtd":
		fallthrough
	case "qtd":
		fallthrough
	case "ytd":
		fallthrough
	case "all":
		*e = ListCommissionsInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCommissionsInterval: %v", v)
	}
}

type ListCommissionsRequest struct {
	Type *QueryParamType `queryParam:"style=form,explode=true,name=type"`
	// Filter the list of commissions by the associated customer.
	CustomerID *string `queryParam:"style=form,explode=true,name=customerId"`
	// Filter the list of commissions by the associated payout.
	PayoutID *string `queryParam:"style=form,explode=true,name=payoutId"`
	// Filter the list of commissions by the associated partner.
	PartnerID *string `queryParam:"style=form,explode=true,name=partnerId"`
	// Filter the list of commissions by the associated invoice. Since invoiceId is unique on a per-program basis, this will only return one commission per invoice.
	InvoiceID *string `queryParam:"style=form,explode=true,name=invoiceId"`
	// Filter the list of commissions by their corresponding status.
	Status *QueryParamStatus `queryParam:"style=form,explode=true,name=status"`
	// The field to sort the list of commissions by.
	SortBy *ListCommissionsSortBy `default:"createdAt" queryParam:"style=form,explode=true,name=sortBy"`
	// The sort order for the list of commissions.
	SortOrder *ListCommissionsSortOrder `default:"desc" queryParam:"style=form,explode=true,name=sortOrder"`
	// The interval to retrieve commissions for.
	Interval *ListCommissionsInterval `default:"all" queryParam:"style=form,explode=true,name=interval"`
	// The start date of the date range to filter the commissions by.
	Start *string `queryParam:"style=form,explode=true,name=start"`
	// The end date of the date range to filter the commissions by.
	End *string `queryParam:"style=form,explode=true,name=end"`
	// The page number for pagination.
	Page *float64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// The number of items per page.
	PageSize *float64 `default:"100" queryParam:"style=form,explode=true,name=pageSize"`
}

func (l ListCommissionsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCommissionsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListCommissionsRequest) GetType() *QueryParamType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListCommissionsRequest) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *ListCommissionsRequest) GetPayoutID() *string {
	if o == nil {
		return nil
	}
	return o.PayoutID
}

func (o *ListCommissionsRequest) GetPartnerID() *string {
	if o == nil {
		return nil
	}
	return o.PartnerID
}

func (o *ListCommissionsRequest) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *ListCommissionsRequest) GetStatus() *QueryParamStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListCommissionsRequest) GetSortBy() *ListCommissionsSortBy {
	if o == nil {
		return nil
	}
	return o.SortBy
}

func (o *ListCommissionsRequest) GetSortOrder() *ListCommissionsSortOrder {
	if o == nil {
		return nil
	}
	return o.SortOrder
}

func (o *ListCommissionsRequest) GetInterval() *ListCommissionsInterval {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *ListCommissionsRequest) GetStart() *string {
	if o == nil {
		return nil
	}
	return o.Start
}

func (o *ListCommissionsRequest) GetEnd() *string {
	if o == nil {
		return nil
	}
	return o.End
}

func (o *ListCommissionsRequest) GetPage() *float64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListCommissionsRequest) GetPageSize() *float64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

type ListCommissionsTypeResponse string

const (
	ListCommissionsTypeResponseClick  ListCommissionsTypeResponse = "click"
	ListCommissionsTypeResponseLead   ListCommissionsTypeResponse = "lead"
	ListCommissionsTypeResponseSale   ListCommissionsTypeResponse = "sale"
	ListCommissionsTypeResponseCustom ListCommissionsTypeResponse = "custom"
)

func (e ListCommissionsTypeResponse) ToPointer() *ListCommissionsTypeResponse {
	return &e
}
func (e *ListCommissionsTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "click":
		fallthrough
	case "lead":
		fallthrough
	case "sale":
		fallthrough
	case "custom":
		*e = ListCommissionsTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCommissionsTypeResponse: %v", v)
	}
}

type ListCommissionsStatusResponse string

const (
	ListCommissionsStatusResponsePending   ListCommissionsStatusResponse = "pending"
	ListCommissionsStatusResponseProcessed ListCommissionsStatusResponse = "processed"
	ListCommissionsStatusResponsePaid      ListCommissionsStatusResponse = "paid"
	ListCommissionsStatusResponseRefunded  ListCommissionsStatusResponse = "refunded"
	ListCommissionsStatusResponseDuplicate ListCommissionsStatusResponse = "duplicate"
	ListCommissionsStatusResponseFraud     ListCommissionsStatusResponse = "fraud"
	ListCommissionsStatusResponseCanceled  ListCommissionsStatusResponse = "canceled"
)

func (e ListCommissionsStatusResponse) ToPointer() *ListCommissionsStatusResponse {
	return &e
}
func (e *ListCommissionsStatusResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "processed":
		fallthrough
	case "paid":
		fallthrough
	case "refunded":
		fallthrough
	case "duplicate":
		fallthrough
	case "fraud":
		fallthrough
	case "canceled":
		*e = ListCommissionsStatusResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCommissionsStatusResponse: %v", v)
	}
}

type ListCommissionsResponseBody struct {
	// The commission's unique ID on Dub.
	ID          string                        `json:"id"`
	Type        *ListCommissionsTypeResponse  `json:"type,omitempty"`
	Amount      float64                       `json:"amount"`
	Earnings    float64                       `json:"earnings"`
	Currency    string                        `json:"currency"`
	Status      ListCommissionsStatusResponse `json:"status"`
	InvoiceID   *string                       `json:"invoiceId,omitempty"`
	Description *string                       `json:"description,omitempty"`
	CreatedAt   string                        `json:"createdAt"`
	UpdatedAt   string                        `json:"updatedAt"`
}

func (o *ListCommissionsResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListCommissionsResponseBody) GetType() *ListCommissionsTypeResponse {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListCommissionsResponseBody) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCommissionsResponseBody) GetEarnings() float64 {
	if o == nil {
		return 0.0
	}
	return o.Earnings
}

func (o *ListCommissionsResponseBody) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListCommissionsResponseBody) GetStatus() ListCommissionsStatusResponse {
	if o == nil {
		return ListCommissionsStatusResponse("")
	}
	return o.Status
}

func (o *ListCommissionsResponseBody) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *ListCommissionsResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListCommissionsResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ListCommissionsResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

type ListCommissionsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The list of commissions.
	ResponseBodies []ListCommissionsResponseBody
	// The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
	FourHundred *shared.FourHundred
	// Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
	FourHundredAndOne *shared.FourHundredAndOne
	// The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
	FourHundredAndThree *shared.FourHundredAndThree
	// The server cannot find the requested resource.
	FourHundredAndFour *shared.FourHundredAndFour
	// This response is sent when a request conflicts with the current state of the server.
	FourHundredAndNine *shared.FourHundredAndNine
	// This response is sent when the requested content has been permanently deleted from server, with no forwarding address.
	FourHundredAndTen *shared.FourHundredAndTen
	// The request was well-formed but was unable to be followed due to semantic errors.
	FourHundredAndTwentyTwo *shared.FourHundredAndTwentyTwo
	// The user has sent too many requests in a given amount of time ("rate limiting")
	FourHundredAndTwentyNine *shared.FourHundredAndTwentyNine
	// The server has encountered a situation it does not know how to handle.
	FiveHundred *shared.FiveHundred
}

func (o *ListCommissionsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListCommissionsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListCommissionsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListCommissionsResponse) GetResponseBodies() []ListCommissionsResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}

func (o *ListCommissionsResponse) GetFourHundred() *shared.FourHundred {
	if o == nil {
		return nil
	}
	return o.FourHundred
}

func (o *ListCommissionsResponse) GetFourHundredAndOne() *shared.FourHundredAndOne {
	if o == nil {
		return nil
	}
	return o.FourHundredAndOne
}

func (o *ListCommissionsResponse) GetFourHundredAndThree() *shared.FourHundredAndThree {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThree
}

func (o *ListCommissionsResponse) GetFourHundredAndFour() *shared.FourHundredAndFour {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFour
}

func (o *ListCommissionsResponse) GetFourHundredAndNine() *shared.FourHundredAndNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndNine
}

func (o *ListCommissionsResponse) GetFourHundredAndTen() *shared.FourHundredAndTen {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTen
}

func (o *ListCommissionsResponse) GetFourHundredAndTwentyTwo() *shared.FourHundredAndTwentyTwo {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyTwo
}

func (o *ListCommissionsResponse) GetFourHundredAndTwentyNine() *shared.FourHundredAndTwentyNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyNine
}

func (o *ListCommissionsResponse) GetFiveHundred() *shared.FiveHundred {
	if o == nil {
		return nil
	}
	return o.FiveHundred
}
