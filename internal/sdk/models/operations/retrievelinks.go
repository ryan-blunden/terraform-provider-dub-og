// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/models/shared"
	"net/http"
)

type RetrieveLinksRequest struct {
	ProgramID string  `queryParam:"style=form,explode=true,name=programId"`
	PartnerID *string `queryParam:"style=form,explode=true,name=partnerId"`
	TenantID  *string `queryParam:"style=form,explode=true,name=tenantId"`
}

func (o *RetrieveLinksRequest) GetProgramID() string {
	if o == nil {
		return ""
	}
	return o.ProgramID
}

func (o *RetrieveLinksRequest) GetPartnerID() *string {
	if o == nil {
		return nil
	}
	return o.PartnerID
}

func (o *RetrieveLinksRequest) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

type RetrieveLinksLink struct {
	// The unique ID of the short link.
	ID string `json:"id"`
	// The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
	Domain string `json:"domain"`
	// The short link slug. If not provided, a random 7-character slug will be generated.
	Key string `json:"key"`
	// The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
	ShortLink string `json:"shortLink"`
	// The destination URL of the short link.
	URL string `json:"url"`
	// The number of clicks on the short link.
	Clicks *float64 `default:"0" json:"clicks"`
	// The number of leads the short links has generated.
	Leads *float64 `default:"0" json:"leads"`
	// The number of sales the short links has generated.
	Sales *float64 `default:"0" json:"sales"`
	// The total dollar amount of sales the short links has generated (in cents).
	SaleAmount *float64 `default:"0" json:"saleAmount"`
}

func (r RetrieveLinksLink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveLinksLink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveLinksLink) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrieveLinksLink) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *RetrieveLinksLink) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *RetrieveLinksLink) GetShortLink() string {
	if o == nil {
		return ""
	}
	return o.ShortLink
}

func (o *RetrieveLinksLink) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *RetrieveLinksLink) GetClicks() *float64 {
	if o == nil {
		return nil
	}
	return o.Clicks
}

func (o *RetrieveLinksLink) GetLeads() *float64 {
	if o == nil {
		return nil
	}
	return o.Leads
}

func (o *RetrieveLinksLink) GetSales() *float64 {
	if o == nil {
		return nil
	}
	return o.Sales
}

func (o *RetrieveLinksLink) GetSaleAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.SaleAmount
}

type RetrieveLinksResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The retrieved partner links.
	Links []RetrieveLinksLink
	// The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
	FourHundred *shared.FourHundred
	// Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
	FourHundredAndOne *shared.FourHundredAndOne
	// The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
	FourHundredAndThree *shared.FourHundredAndThree
	// The server cannot find the requested resource.
	FourHundredAndFour *shared.FourHundredAndFour
	// This response is sent when a request conflicts with the current state of the server.
	FourHundredAndNine *shared.FourHundredAndNine
	// This response is sent when the requested content has been permanently deleted from server, with no forwarding address.
	FourHundredAndTen *shared.FourHundredAndTen
	// The request was well-formed but was unable to be followed due to semantic errors.
	FourHundredAndTwentyTwo *shared.FourHundredAndTwentyTwo
	// The user has sent too many requests in a given amount of time ("rate limiting")
	FourHundredAndTwentyNine *shared.FourHundredAndTwentyNine
	// The server has encountered a situation it does not know how to handle.
	FiveHundred *shared.FiveHundred
}

func (o *RetrieveLinksResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RetrieveLinksResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RetrieveLinksResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *RetrieveLinksResponse) GetLinks() []RetrieveLinksLink {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *RetrieveLinksResponse) GetFourHundred() *shared.FourHundred {
	if o == nil {
		return nil
	}
	return o.FourHundred
}

func (o *RetrieveLinksResponse) GetFourHundredAndOne() *shared.FourHundredAndOne {
	if o == nil {
		return nil
	}
	return o.FourHundredAndOne
}

func (o *RetrieveLinksResponse) GetFourHundredAndThree() *shared.FourHundredAndThree {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThree
}

func (o *RetrieveLinksResponse) GetFourHundredAndFour() *shared.FourHundredAndFour {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFour
}

func (o *RetrieveLinksResponse) GetFourHundredAndNine() *shared.FourHundredAndNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndNine
}

func (o *RetrieveLinksResponse) GetFourHundredAndTen() *shared.FourHundredAndTen {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTen
}

func (o *RetrieveLinksResponse) GetFourHundredAndTwentyTwo() *shared.FourHundredAndTwentyTwo {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyTwo
}

func (o *RetrieveLinksResponse) GetFourHundredAndTwentyNine() *shared.FourHundredAndTwentyNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyNine
}

func (o *RetrieveLinksResponse) GetFiveHundred() *shared.FiveHundred {
	if o == nil {
		return nil
	}
	return o.FiveHundred
}
