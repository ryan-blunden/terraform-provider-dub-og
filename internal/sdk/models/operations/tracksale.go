// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/models/shared"
	"net/http"
)

// PaymentProcessor - The payment processor via which the sale was made.
type PaymentProcessor string

const (
	PaymentProcessorStripe  PaymentProcessor = "stripe"
	PaymentProcessorShopify PaymentProcessor = "shopify"
	PaymentProcessorPolar   PaymentProcessor = "polar"
	PaymentProcessorPaddle  PaymentProcessor = "paddle"
	PaymentProcessorCustom  PaymentProcessor = "custom"
)

func (e PaymentProcessor) ToPointer() *PaymentProcessor {
	return &e
}
func (e *PaymentProcessor) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stripe":
		fallthrough
	case "shopify":
		fallthrough
	case "polar":
		fallthrough
	case "paddle":
		fallthrough
	case "custom":
		*e = PaymentProcessor(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentProcessor: %v", v)
	}
}

type TrackSaleRequest struct {
	// The unique ID of the customer in your system. Will be used to identify and attribute all future events to this customer.
	ExternalID string `json:"externalId"`
	// The amount of the sale in cents.
	Amount int64 `json:"amount"`
	// The payment processor via which the sale was made.
	PaymentProcessor PaymentProcessor `json:"paymentProcessor"`
	// The name of the sale event.
	EventName *string `default:"Purchase" json:"eventName"`
	// The invoice ID of the sale. Can be used as a idempotency key â€“ only one sale event can be recorded for a given invoice ID.
	InvoiceID *string `default:"null" json:"invoiceId"`
	// The currency of the sale. Accepts ISO 4217 currency codes.
	Currency *string `default:"usd" json:"currency"`
	// The name of the lead event that occurred before the sale (case-sensitive). This is used to associate the sale event with a particular lead event (instead of the latest lead event, which is the default behavior).
	LeadEventName *string `default:"null" json:"leadEventName"`
	// Additional metadata to be stored with the sale event. Max 10,000 characters.
	Metadata map[string]any `json:"metadata,omitempty"`
}

func (t TrackSaleRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TrackSaleRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TrackSaleRequest) GetExternalID() string {
	if o == nil {
		return ""
	}
	return o.ExternalID
}

func (o *TrackSaleRequest) GetAmount() int64 {
	if o == nil {
		return 0
	}
	return o.Amount
}

func (o *TrackSaleRequest) GetPaymentProcessor() PaymentProcessor {
	if o == nil {
		return PaymentProcessor("")
	}
	return o.PaymentProcessor
}

func (o *TrackSaleRequest) GetEventName() *string {
	if o == nil {
		return nil
	}
	return o.EventName
}

func (o *TrackSaleRequest) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *TrackSaleRequest) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *TrackSaleRequest) GetLeadEventName() *string {
	if o == nil {
		return nil
	}
	return o.LeadEventName
}

func (o *TrackSaleRequest) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

type TrackSaleCustomer struct {
	ID         string  `json:"id"`
	Name       *string `json:"name"`
	Email      *string `json:"email"`
	Avatar     *string `json:"avatar"`
	ExternalID *string `json:"externalId"`
}

func (o *TrackSaleCustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TrackSaleCustomer) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *TrackSaleCustomer) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *TrackSaleCustomer) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *TrackSaleCustomer) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

type Sale struct {
	Amount           float64        `json:"amount"`
	Currency         string         `json:"currency"`
	PaymentProcessor string         `json:"paymentProcessor"`
	InvoiceID        *string        `json:"invoiceId"`
	Metadata         map[string]any `json:"metadata"`
}

func (o *Sale) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *Sale) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *Sale) GetPaymentProcessor() string {
	if o == nil {
		return ""
	}
	return o.PaymentProcessor
}

func (o *Sale) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *Sale) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

// TrackSaleResponseBody - A sale was tracked.
type TrackSaleResponseBody struct {
	EventName string             `json:"eventName"`
	Customer  *TrackSaleCustomer `json:"customer"`
	Sale      *Sale              `json:"sale"`
}

func (o *TrackSaleResponseBody) GetEventName() string {
	if o == nil {
		return ""
	}
	return o.EventName
}

func (o *TrackSaleResponseBody) GetCustomer() *TrackSaleCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *TrackSaleResponseBody) GetSale() *Sale {
	if o == nil {
		return nil
	}
	return o.Sale
}

type TrackSaleResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A sale was tracked.
	Object *TrackSaleResponseBody
	// The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
	FourHundred *shared.FourHundred
	// Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
	FourHundredAndOne *shared.FourHundredAndOne
	// The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
	FourHundredAndThree *shared.FourHundredAndThree
	// The server cannot find the requested resource.
	FourHundredAndFour *shared.FourHundredAndFour
	// This response is sent when a request conflicts with the current state of the server.
	FourHundredAndNine *shared.FourHundredAndNine
	// This response is sent when the requested content has been permanently deleted from server, with no forwarding address.
	FourHundredAndTen *shared.FourHundredAndTen
	// The request was well-formed but was unable to be followed due to semantic errors.
	FourHundredAndTwentyTwo *shared.FourHundredAndTwentyTwo
	// The user has sent too many requests in a given amount of time ("rate limiting")
	FourHundredAndTwentyNine *shared.FourHundredAndTwentyNine
	// The server has encountered a situation it does not know how to handle.
	FiveHundred *shared.FiveHundred
}

func (o *TrackSaleResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *TrackSaleResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *TrackSaleResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *TrackSaleResponse) GetObject() *TrackSaleResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *TrackSaleResponse) GetFourHundred() *shared.FourHundred {
	if o == nil {
		return nil
	}
	return o.FourHundred
}

func (o *TrackSaleResponse) GetFourHundredAndOne() *shared.FourHundredAndOne {
	if o == nil {
		return nil
	}
	return o.FourHundredAndOne
}

func (o *TrackSaleResponse) GetFourHundredAndThree() *shared.FourHundredAndThree {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThree
}

func (o *TrackSaleResponse) GetFourHundredAndFour() *shared.FourHundredAndFour {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFour
}

func (o *TrackSaleResponse) GetFourHundredAndNine() *shared.FourHundredAndNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndNine
}

func (o *TrackSaleResponse) GetFourHundredAndTen() *shared.FourHundredAndTen {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTen
}

func (o *TrackSaleResponse) GetFourHundredAndTwentyTwo() *shared.FourHundredAndTwentyTwo {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyTwo
}

func (o *TrackSaleResponse) GetFourHundredAndTwentyNine() *shared.FourHundredAndTwentyNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyNine
}

func (o *TrackSaleResponse) GetFiveHundred() *shared.FiveHundred {
	if o == nil {
		return nil
	}
	return o.FiveHundred
}
