// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/models/shared"
	"net/http"
)

// StatusRequest - Useful for marking a commission as refunded, duplicate, canceled, or fraudulent. Takes precedence over `amount` and `modifyAmount`. When a commission is marked as refunded, duplicate, canceled, or fraudulent, it will be omitted from the payout, and the payout amount will be recalculated accordingly. Paid commissions cannot be updated.
type StatusRequest string

const (
	StatusRequestRefunded  StatusRequest = "refunded"
	StatusRequestDuplicate StatusRequest = "duplicate"
	StatusRequestCanceled  StatusRequest = "canceled"
	StatusRequestFraud     StatusRequest = "fraud"
)

func (e StatusRequest) ToPointer() *StatusRequest {
	return &e
}
func (e *StatusRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "refunded":
		fallthrough
	case "duplicate":
		fallthrough
	case "canceled":
		fallthrough
	case "fraud":
		*e = StatusRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StatusRequest: %v", v)
	}
}

type UpdateCommissionRequestBody struct {
	// The new absolute amount for the sale. Paid commissions cannot be updated.
	Amount *float64 `json:"amount,omitempty"`
	// Modify the current sale amount: use positive values to increase the amount, negative values to decrease it. Takes precedence over `amount`. Paid commissions cannot be updated.
	ModifyAmount *float64 `json:"modifyAmount,omitempty"`
	// The currency of the sale amount to update. Accepts ISO 4217 currency codes.
	Currency *string `default:"usd" json:"currency"`
	// Useful for marking a commission as refunded, duplicate, canceled, or fraudulent. Takes precedence over `amount` and `modifyAmount`. When a commission is marked as refunded, duplicate, canceled, or fraudulent, it will be omitted from the payout, and the payout amount will be recalculated accordingly. Paid commissions cannot be updated.
	Status *StatusRequest `json:"status,omitempty"`
}

func (u UpdateCommissionRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateCommissionRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateCommissionRequestBody) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *UpdateCommissionRequestBody) GetModifyAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.ModifyAmount
}

func (o *UpdateCommissionRequestBody) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *UpdateCommissionRequestBody) GetStatus() *StatusRequest {
	if o == nil {
		return nil
	}
	return o.Status
}

type UpdateCommissionRequest struct {
	// The commission's unique ID on Dub.
	ID          string                       `pathParam:"style=simple,explode=false,name=id"`
	RequestBody *UpdateCommissionRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateCommissionRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateCommissionRequest) GetRequestBody() *UpdateCommissionRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdateCommissionType string

const (
	UpdateCommissionTypeClick  UpdateCommissionType = "click"
	UpdateCommissionTypeLead   UpdateCommissionType = "lead"
	UpdateCommissionTypeSale   UpdateCommissionType = "sale"
	UpdateCommissionTypeCustom UpdateCommissionType = "custom"
)

func (e UpdateCommissionType) ToPointer() *UpdateCommissionType {
	return &e
}
func (e *UpdateCommissionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "click":
		fallthrough
	case "lead":
		fallthrough
	case "sale":
		fallthrough
	case "custom":
		*e = UpdateCommissionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCommissionType: %v", v)
	}
}

type UpdateCommissionStatusResponse string

const (
	UpdateCommissionStatusResponsePending   UpdateCommissionStatusResponse = "pending"
	UpdateCommissionStatusResponseProcessed UpdateCommissionStatusResponse = "processed"
	UpdateCommissionStatusResponsePaid      UpdateCommissionStatusResponse = "paid"
	UpdateCommissionStatusResponseRefunded  UpdateCommissionStatusResponse = "refunded"
	UpdateCommissionStatusResponseDuplicate UpdateCommissionStatusResponse = "duplicate"
	UpdateCommissionStatusResponseFraud     UpdateCommissionStatusResponse = "fraud"
	UpdateCommissionStatusResponseCanceled  UpdateCommissionStatusResponse = "canceled"
)

func (e UpdateCommissionStatusResponse) ToPointer() *UpdateCommissionStatusResponse {
	return &e
}
func (e *UpdateCommissionStatusResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "processed":
		fallthrough
	case "paid":
		fallthrough
	case "refunded":
		fallthrough
	case "duplicate":
		fallthrough
	case "fraud":
		fallthrough
	case "canceled":
		*e = UpdateCommissionStatusResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCommissionStatusResponse: %v", v)
	}
}

// UpdateCommissionResponseBody - The updated commission.
type UpdateCommissionResponseBody struct {
	// The commission's unique ID on Dub.
	ID          string                         `json:"id"`
	Type        *UpdateCommissionType          `json:"type,omitempty"`
	Amount      float64                        `json:"amount"`
	Earnings    float64                        `json:"earnings"`
	Currency    string                         `json:"currency"`
	Status      UpdateCommissionStatusResponse `json:"status"`
	InvoiceID   *string                        `json:"invoiceId,omitempty"`
	Description *string                        `json:"description,omitempty"`
	CreatedAt   string                         `json:"createdAt"`
	UpdatedAt   string                         `json:"updatedAt"`
}

func (o *UpdateCommissionResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateCommissionResponseBody) GetType() *UpdateCommissionType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateCommissionResponseBody) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *UpdateCommissionResponseBody) GetEarnings() float64 {
	if o == nil {
		return 0.0
	}
	return o.Earnings
}

func (o *UpdateCommissionResponseBody) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdateCommissionResponseBody) GetStatus() UpdateCommissionStatusResponse {
	if o == nil {
		return UpdateCommissionStatusResponse("")
	}
	return o.Status
}

func (o *UpdateCommissionResponseBody) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *UpdateCommissionResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateCommissionResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *UpdateCommissionResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

type UpdateCommissionResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The updated commission.
	Object *UpdateCommissionResponseBody
	// The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
	FourHundred *shared.FourHundred
	// Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
	FourHundredAndOne *shared.FourHundredAndOne
	// The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
	FourHundredAndThree *shared.FourHundredAndThree
	// The server cannot find the requested resource.
	FourHundredAndFour *shared.FourHundredAndFour
	// This response is sent when a request conflicts with the current state of the server.
	FourHundredAndNine *shared.FourHundredAndNine
	// This response is sent when the requested content has been permanently deleted from server, with no forwarding address.
	FourHundredAndTen *shared.FourHundredAndTen
	// The request was well-formed but was unable to be followed due to semantic errors.
	FourHundredAndTwentyTwo *shared.FourHundredAndTwentyTwo
	// The user has sent too many requests in a given amount of time ("rate limiting")
	FourHundredAndTwentyNine *shared.FourHundredAndTwentyNine
	// The server has encountered a situation it does not know how to handle.
	FiveHundred *shared.FiveHundred
}

func (o *UpdateCommissionResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateCommissionResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateCommissionResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdateCommissionResponse) GetObject() *UpdateCommissionResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *UpdateCommissionResponse) GetFourHundred() *shared.FourHundred {
	if o == nil {
		return nil
	}
	return o.FourHundred
}

func (o *UpdateCommissionResponse) GetFourHundredAndOne() *shared.FourHundredAndOne {
	if o == nil {
		return nil
	}
	return o.FourHundredAndOne
}

func (o *UpdateCommissionResponse) GetFourHundredAndThree() *shared.FourHundredAndThree {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThree
}

func (o *UpdateCommissionResponse) GetFourHundredAndFour() *shared.FourHundredAndFour {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFour
}

func (o *UpdateCommissionResponse) GetFourHundredAndNine() *shared.FourHundredAndNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndNine
}

func (o *UpdateCommissionResponse) GetFourHundredAndTen() *shared.FourHundredAndTen {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTen
}

func (o *UpdateCommissionResponse) GetFourHundredAndTwentyTwo() *shared.FourHundredAndTwentyTwo {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyTwo
}

func (o *UpdateCommissionResponse) GetFourHundredAndTwentyNine() *shared.FourHundredAndTwentyNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyNine
}

func (o *UpdateCommissionResponse) GetFiveHundred() *shared.FiveHundred {
	if o == nil {
		return nil
	}
	return o.FiveHundred
}
