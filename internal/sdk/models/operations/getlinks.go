// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/models/shared"
	"net/http"
)

type GetLinksTagIdsType string

const (
	GetLinksTagIdsTypeStr        GetLinksTagIdsType = "str"
	GetLinksTagIdsTypeArrayOfStr GetLinksTagIdsType = "arrayOfStr"
)

// GetLinksTagIds - The tag IDs to filter the links by.
type GetLinksTagIds struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type GetLinksTagIdsType
}

func CreateGetLinksTagIdsStr(str string) GetLinksTagIds {
	typ := GetLinksTagIdsTypeStr

	return GetLinksTagIds{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetLinksTagIdsArrayOfStr(arrayOfStr []string) GetLinksTagIds {
	typ := GetLinksTagIdsTypeArrayOfStr

	return GetLinksTagIds{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *GetLinksTagIds) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetLinksTagIdsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = GetLinksTagIdsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetLinksTagIds", string(data))
}

func (u GetLinksTagIds) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type GetLinksTagIds: all fields are null")
}

type GetLinksTagNamesType string

const (
	GetLinksTagNamesTypeStr        GetLinksTagNamesType = "str"
	GetLinksTagNamesTypeArrayOfStr GetLinksTagNamesType = "arrayOfStr"
)

// GetLinksTagNames - The unique name of the tags assigned to the short link (case insensitive).
type GetLinksTagNames struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type GetLinksTagNamesType
}

func CreateGetLinksTagNamesStr(str string) GetLinksTagNames {
	typ := GetLinksTagNamesTypeStr

	return GetLinksTagNames{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetLinksTagNamesArrayOfStr(arrayOfStr []string) GetLinksTagNames {
	typ := GetLinksTagNamesTypeArrayOfStr

	return GetLinksTagNames{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *GetLinksTagNames) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetLinksTagNamesTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = GetLinksTagNamesTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetLinksTagNames", string(data))
}

func (u GetLinksTagNames) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type GetLinksTagNames: all fields are null")
}

// GetLinksSortBy - The field to sort the links by. The default is `createdAt`.
type GetLinksSortBy string

const (
	GetLinksSortByCreatedAt   GetLinksSortBy = "createdAt"
	GetLinksSortByClicks      GetLinksSortBy = "clicks"
	GetLinksSortBySaleAmount  GetLinksSortBy = "saleAmount"
	GetLinksSortByLastClicked GetLinksSortBy = "lastClicked"
)

func (e GetLinksSortBy) ToPointer() *GetLinksSortBy {
	return &e
}
func (e *GetLinksSortBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "createdAt":
		fallthrough
	case "clicks":
		fallthrough
	case "saleAmount":
		fallthrough
	case "lastClicked":
		*e = GetLinksSortBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLinksSortBy: %v", v)
	}
}

// GetLinksSortOrder - The sort order. The default is `desc`.
type GetLinksSortOrder string

const (
	GetLinksSortOrderAsc  GetLinksSortOrder = "asc"
	GetLinksSortOrderDesc GetLinksSortOrder = "desc"
)

func (e GetLinksSortOrder) ToPointer() *GetLinksSortOrder {
	return &e
}
func (e *GetLinksSortOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetLinksSortOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLinksSortOrder: %v", v)
	}
}

// Sort - DEPRECATED. Use `sortBy` instead.
//
// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
type Sort string

const (
	SortCreatedAt   Sort = "createdAt"
	SortClicks      Sort = "clicks"
	SortSaleAmount  Sort = "saleAmount"
	SortLastClicked Sort = "lastClicked"
)

func (e Sort) ToPointer() *Sort {
	return &e
}
func (e *Sort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "createdAt":
		fallthrough
	case "clicks":
		fallthrough
	case "saleAmount":
		fallthrough
	case "lastClicked":
		*e = Sort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sort: %v", v)
	}
}

type GetLinksRequest struct {
	// The domain to filter the links by. E.g. `ac.me`. If not provided, all links for the workspace will be returned.
	Domain *string `queryParam:"style=form,explode=true,name=domain"`
	// Deprecated. Use `tagIds` instead. The tag ID to filter the links by.
	TagID *string `queryParam:"style=form,explode=true,name=tagId"`
	// The tag IDs to filter the links by.
	TagIds *GetLinksTagIds `queryParam:"style=form,explode=false,name=tagIds"`
	// The unique name of the tags assigned to the short link (case insensitive).
	TagNames *GetLinksTagNames `queryParam:"style=form,explode=false,name=tagNames"`
	// The folder ID to filter the links by.
	FolderID *string `queryParam:"style=form,explode=true,name=folderId"`
	// The search term to filter the links by. The search term will be matched against the short link slug and the destination url.
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// The user ID to filter the links by.
	UserID *string `queryParam:"style=form,explode=true,name=userId"`
	// The ID of the tenant that created the link inside your system. If set, will only return links for the specified tenant.
	TenantID *string `queryParam:"style=form,explode=true,name=tenantId"`
	// Whether to include archived links in the response. Defaults to `false` if not provided.
	ShowArchived *bool `default:"false" queryParam:"style=form,explode=true,name=showArchived"`
	// DEPRECATED. Filter for links that have at least one tag assigned to them.
	WithTags *bool `default:"false" queryParam:"style=form,explode=true,name=withTags"`
	// The field to sort the links by. The default is `createdAt`.
	SortBy *GetLinksSortBy `default:"createdAt" queryParam:"style=form,explode=true,name=sortBy"`
	// The sort order. The default is `desc`.
	SortOrder *GetLinksSortOrder `default:"desc" queryParam:"style=form,explode=true,name=sortOrder"`
	// DEPRECATED. Use `sortBy` instead.
	Sort *Sort `default:"createdAt" queryParam:"style=form,explode=true,name=sort"`
	// The page number for pagination.
	Page *float64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// The number of items per page.
	PageSize *float64 `default:"100" queryParam:"style=form,explode=true,name=pageSize"`
}

func (g GetLinksRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetLinksRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetLinksRequest) GetDomain() *string {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *GetLinksRequest) GetTagID() *string {
	if o == nil {
		return nil
	}
	return o.TagID
}

func (o *GetLinksRequest) GetTagIds() *GetLinksTagIds {
	if o == nil {
		return nil
	}
	return o.TagIds
}

func (o *GetLinksRequest) GetTagNames() *GetLinksTagNames {
	if o == nil {
		return nil
	}
	return o.TagNames
}

func (o *GetLinksRequest) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

func (o *GetLinksRequest) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *GetLinksRequest) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *GetLinksRequest) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *GetLinksRequest) GetShowArchived() *bool {
	if o == nil {
		return nil
	}
	return o.ShowArchived
}

func (o *GetLinksRequest) GetWithTags() *bool {
	if o == nil {
		return nil
	}
	return o.WithTags
}

func (o *GetLinksRequest) GetSortBy() *GetLinksSortBy {
	if o == nil {
		return nil
	}
	return o.SortBy
}

func (o *GetLinksRequest) GetSortOrder() *GetLinksSortOrder {
	if o == nil {
		return nil
	}
	return o.SortOrder
}

func (o *GetLinksRequest) GetSort() *Sort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *GetLinksRequest) GetPage() *float64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *GetLinksRequest) GetPageSize() *float64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

type GetLinksResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A list of links
	LinkSchemas []shared.LinkSchema
	// The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
	FourHundred *shared.FourHundred
	// Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
	FourHundredAndOne *shared.FourHundredAndOne
	// The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
	FourHundredAndThree *shared.FourHundredAndThree
	// The server cannot find the requested resource.
	FourHundredAndFour *shared.FourHundredAndFour
	// This response is sent when a request conflicts with the current state of the server.
	FourHundredAndNine *shared.FourHundredAndNine
	// This response is sent when the requested content has been permanently deleted from server, with no forwarding address.
	FourHundredAndTen *shared.FourHundredAndTen
	// The request was well-formed but was unable to be followed due to semantic errors.
	FourHundredAndTwentyTwo *shared.FourHundredAndTwentyTwo
	// The user has sent too many requests in a given amount of time ("rate limiting")
	FourHundredAndTwentyNine *shared.FourHundredAndTwentyNine
	// The server has encountered a situation it does not know how to handle.
	FiveHundred *shared.FiveHundred
}

func (o *GetLinksResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetLinksResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetLinksResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetLinksResponse) GetLinkSchemas() []shared.LinkSchema {
	if o == nil {
		return nil
	}
	return o.LinkSchemas
}

func (o *GetLinksResponse) GetFourHundred() *shared.FourHundred {
	if o == nil {
		return nil
	}
	return o.FourHundred
}

func (o *GetLinksResponse) GetFourHundredAndOne() *shared.FourHundredAndOne {
	if o == nil {
		return nil
	}
	return o.FourHundredAndOne
}

func (o *GetLinksResponse) GetFourHundredAndThree() *shared.FourHundredAndThree {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThree
}

func (o *GetLinksResponse) GetFourHundredAndFour() *shared.FourHundredAndFour {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFour
}

func (o *GetLinksResponse) GetFourHundredAndNine() *shared.FourHundredAndNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndNine
}

func (o *GetLinksResponse) GetFourHundredAndTen() *shared.FourHundredAndTen {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTen
}

func (o *GetLinksResponse) GetFourHundredAndTwentyTwo() *shared.FourHundredAndTwentyTwo {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyTwo
}

func (o *GetLinksResponse) GetFourHundredAndTwentyNine() *shared.FourHundredAndTwentyNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyNine
}

func (o *GetLinksResponse) GetFiveHundred() *shared.FiveHundred {
	if o == nil {
		return nil
	}
	return o.FiveHundred
}
