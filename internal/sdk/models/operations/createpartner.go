// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/models/shared"
	"net/http"
)

// CreatePartnerCountry - Country where the partner is based.
type CreatePartnerCountry string

const (
	CreatePartnerCountryAf CreatePartnerCountry = "AF"
	CreatePartnerCountryAl CreatePartnerCountry = "AL"
	CreatePartnerCountryDz CreatePartnerCountry = "DZ"
	CreatePartnerCountryAs CreatePartnerCountry = "AS"
	CreatePartnerCountryAd CreatePartnerCountry = "AD"
	CreatePartnerCountryAo CreatePartnerCountry = "AO"
	CreatePartnerCountryAi CreatePartnerCountry = "AI"
	CreatePartnerCountryAq CreatePartnerCountry = "AQ"
	CreatePartnerCountryAg CreatePartnerCountry = "AG"
	CreatePartnerCountryAr CreatePartnerCountry = "AR"
	CreatePartnerCountryAm CreatePartnerCountry = "AM"
	CreatePartnerCountryAw CreatePartnerCountry = "AW"
	CreatePartnerCountryAu CreatePartnerCountry = "AU"
	CreatePartnerCountryAt CreatePartnerCountry = "AT"
	CreatePartnerCountryAz CreatePartnerCountry = "AZ"
	CreatePartnerCountryBs CreatePartnerCountry = "BS"
	CreatePartnerCountryBh CreatePartnerCountry = "BH"
	CreatePartnerCountryBd CreatePartnerCountry = "BD"
	CreatePartnerCountryBb CreatePartnerCountry = "BB"
	CreatePartnerCountryBy CreatePartnerCountry = "BY"
	CreatePartnerCountryBe CreatePartnerCountry = "BE"
	CreatePartnerCountryBz CreatePartnerCountry = "BZ"
	CreatePartnerCountryBj CreatePartnerCountry = "BJ"
	CreatePartnerCountryBm CreatePartnerCountry = "BM"
	CreatePartnerCountryBt CreatePartnerCountry = "BT"
	CreatePartnerCountryBo CreatePartnerCountry = "BO"
	CreatePartnerCountryBa CreatePartnerCountry = "BA"
	CreatePartnerCountryBw CreatePartnerCountry = "BW"
	CreatePartnerCountryBv CreatePartnerCountry = "BV"
	CreatePartnerCountryBr CreatePartnerCountry = "BR"
	CreatePartnerCountryIo CreatePartnerCountry = "IO"
	CreatePartnerCountryBn CreatePartnerCountry = "BN"
	CreatePartnerCountryBg CreatePartnerCountry = "BG"
	CreatePartnerCountryBf CreatePartnerCountry = "BF"
	CreatePartnerCountryBi CreatePartnerCountry = "BI"
	CreatePartnerCountryKh CreatePartnerCountry = "KH"
	CreatePartnerCountryCm CreatePartnerCountry = "CM"
	CreatePartnerCountryCa CreatePartnerCountry = "CA"
	CreatePartnerCountryCv CreatePartnerCountry = "CV"
	CreatePartnerCountryKy CreatePartnerCountry = "KY"
	CreatePartnerCountryCf CreatePartnerCountry = "CF"
	CreatePartnerCountryTd CreatePartnerCountry = "TD"
	CreatePartnerCountryCl CreatePartnerCountry = "CL"
	CreatePartnerCountryCn CreatePartnerCountry = "CN"
	CreatePartnerCountryCx CreatePartnerCountry = "CX"
	CreatePartnerCountryCc CreatePartnerCountry = "CC"
	CreatePartnerCountryCo CreatePartnerCountry = "CO"
	CreatePartnerCountryKm CreatePartnerCountry = "KM"
	CreatePartnerCountryCg CreatePartnerCountry = "CG"
	CreatePartnerCountryCd CreatePartnerCountry = "CD"
	CreatePartnerCountryCk CreatePartnerCountry = "CK"
	CreatePartnerCountryCr CreatePartnerCountry = "CR"
	CreatePartnerCountryCi CreatePartnerCountry = "CI"
	CreatePartnerCountryHr CreatePartnerCountry = "HR"
	CreatePartnerCountryCu CreatePartnerCountry = "CU"
	CreatePartnerCountryCy CreatePartnerCountry = "CY"
	CreatePartnerCountryCz CreatePartnerCountry = "CZ"
	CreatePartnerCountryDk CreatePartnerCountry = "DK"
	CreatePartnerCountryDj CreatePartnerCountry = "DJ"
	CreatePartnerCountryDm CreatePartnerCountry = "DM"
	CreatePartnerCountryDo CreatePartnerCountry = "DO"
	CreatePartnerCountryEc CreatePartnerCountry = "EC"
	CreatePartnerCountryEg CreatePartnerCountry = "EG"
	CreatePartnerCountrySv CreatePartnerCountry = "SV"
	CreatePartnerCountryGq CreatePartnerCountry = "GQ"
	CreatePartnerCountryEr CreatePartnerCountry = "ER"
	CreatePartnerCountryEe CreatePartnerCountry = "EE"
	CreatePartnerCountryEt CreatePartnerCountry = "ET"
	CreatePartnerCountryFk CreatePartnerCountry = "FK"
	CreatePartnerCountryFo CreatePartnerCountry = "FO"
	CreatePartnerCountryFj CreatePartnerCountry = "FJ"
	CreatePartnerCountryFi CreatePartnerCountry = "FI"
	CreatePartnerCountryFr CreatePartnerCountry = "FR"
	CreatePartnerCountryGf CreatePartnerCountry = "GF"
	CreatePartnerCountryPf CreatePartnerCountry = "PF"
	CreatePartnerCountryTf CreatePartnerCountry = "TF"
	CreatePartnerCountryGa CreatePartnerCountry = "GA"
	CreatePartnerCountryGm CreatePartnerCountry = "GM"
	CreatePartnerCountryGe CreatePartnerCountry = "GE"
	CreatePartnerCountryDe CreatePartnerCountry = "DE"
	CreatePartnerCountryGh CreatePartnerCountry = "GH"
	CreatePartnerCountryGi CreatePartnerCountry = "GI"
	CreatePartnerCountryGr CreatePartnerCountry = "GR"
	CreatePartnerCountryGl CreatePartnerCountry = "GL"
	CreatePartnerCountryGd CreatePartnerCountry = "GD"
	CreatePartnerCountryGp CreatePartnerCountry = "GP"
	CreatePartnerCountryGu CreatePartnerCountry = "GU"
	CreatePartnerCountryGt CreatePartnerCountry = "GT"
	CreatePartnerCountryGn CreatePartnerCountry = "GN"
	CreatePartnerCountryGw CreatePartnerCountry = "GW"
	CreatePartnerCountryGy CreatePartnerCountry = "GY"
	CreatePartnerCountryHt CreatePartnerCountry = "HT"
	CreatePartnerCountryHm CreatePartnerCountry = "HM"
	CreatePartnerCountryVa CreatePartnerCountry = "VA"
	CreatePartnerCountryHn CreatePartnerCountry = "HN"
	CreatePartnerCountryHk CreatePartnerCountry = "HK"
	CreatePartnerCountryHu CreatePartnerCountry = "HU"
	CreatePartnerCountryIs CreatePartnerCountry = "IS"
	CreatePartnerCountryIn CreatePartnerCountry = "IN"
	CreatePartnerCountryID CreatePartnerCountry = "ID"
	CreatePartnerCountryIr CreatePartnerCountry = "IR"
	CreatePartnerCountryIq CreatePartnerCountry = "IQ"
	CreatePartnerCountryIe CreatePartnerCountry = "IE"
	CreatePartnerCountryIl CreatePartnerCountry = "IL"
	CreatePartnerCountryIt CreatePartnerCountry = "IT"
	CreatePartnerCountryJm CreatePartnerCountry = "JM"
	CreatePartnerCountryJp CreatePartnerCountry = "JP"
	CreatePartnerCountryJo CreatePartnerCountry = "JO"
	CreatePartnerCountryKz CreatePartnerCountry = "KZ"
	CreatePartnerCountryKe CreatePartnerCountry = "KE"
	CreatePartnerCountryKi CreatePartnerCountry = "KI"
	CreatePartnerCountryKp CreatePartnerCountry = "KP"
	CreatePartnerCountryKr CreatePartnerCountry = "KR"
	CreatePartnerCountryKw CreatePartnerCountry = "KW"
	CreatePartnerCountryKg CreatePartnerCountry = "KG"
	CreatePartnerCountryLa CreatePartnerCountry = "LA"
	CreatePartnerCountryLv CreatePartnerCountry = "LV"
	CreatePartnerCountryLb CreatePartnerCountry = "LB"
	CreatePartnerCountryLs CreatePartnerCountry = "LS"
	CreatePartnerCountryLr CreatePartnerCountry = "LR"
	CreatePartnerCountryLy CreatePartnerCountry = "LY"
	CreatePartnerCountryLi CreatePartnerCountry = "LI"
	CreatePartnerCountryLt CreatePartnerCountry = "LT"
	CreatePartnerCountryLu CreatePartnerCountry = "LU"
	CreatePartnerCountryMo CreatePartnerCountry = "MO"
	CreatePartnerCountryMg CreatePartnerCountry = "MG"
	CreatePartnerCountryMw CreatePartnerCountry = "MW"
	CreatePartnerCountryMy CreatePartnerCountry = "MY"
	CreatePartnerCountryMv CreatePartnerCountry = "MV"
	CreatePartnerCountryMl CreatePartnerCountry = "ML"
	CreatePartnerCountryMt CreatePartnerCountry = "MT"
	CreatePartnerCountryMh CreatePartnerCountry = "MH"
	CreatePartnerCountryMq CreatePartnerCountry = "MQ"
	CreatePartnerCountryMr CreatePartnerCountry = "MR"
	CreatePartnerCountryMu CreatePartnerCountry = "MU"
	CreatePartnerCountryYt CreatePartnerCountry = "YT"
	CreatePartnerCountryMx CreatePartnerCountry = "MX"
	CreatePartnerCountryFm CreatePartnerCountry = "FM"
	CreatePartnerCountryMd CreatePartnerCountry = "MD"
	CreatePartnerCountryMc CreatePartnerCountry = "MC"
	CreatePartnerCountryMn CreatePartnerCountry = "MN"
	CreatePartnerCountryMs CreatePartnerCountry = "MS"
	CreatePartnerCountryMa CreatePartnerCountry = "MA"
	CreatePartnerCountryMz CreatePartnerCountry = "MZ"
	CreatePartnerCountryMm CreatePartnerCountry = "MM"
	CreatePartnerCountryNa CreatePartnerCountry = "NA"
	CreatePartnerCountryNr CreatePartnerCountry = "NR"
	CreatePartnerCountryNp CreatePartnerCountry = "NP"
	CreatePartnerCountryNl CreatePartnerCountry = "NL"
	CreatePartnerCountryNc CreatePartnerCountry = "NC"
	CreatePartnerCountryNz CreatePartnerCountry = "NZ"
	CreatePartnerCountryNi CreatePartnerCountry = "NI"
	CreatePartnerCountryNe CreatePartnerCountry = "NE"
	CreatePartnerCountryNg CreatePartnerCountry = "NG"
	CreatePartnerCountryNu CreatePartnerCountry = "NU"
	CreatePartnerCountryNf CreatePartnerCountry = "NF"
	CreatePartnerCountryMk CreatePartnerCountry = "MK"
	CreatePartnerCountryMp CreatePartnerCountry = "MP"
	CreatePartnerCountryNo CreatePartnerCountry = "NO"
	CreatePartnerCountryOm CreatePartnerCountry = "OM"
	CreatePartnerCountryPk CreatePartnerCountry = "PK"
	CreatePartnerCountryPw CreatePartnerCountry = "PW"
	CreatePartnerCountryPs CreatePartnerCountry = "PS"
	CreatePartnerCountryPa CreatePartnerCountry = "PA"
	CreatePartnerCountryPg CreatePartnerCountry = "PG"
	CreatePartnerCountryPy CreatePartnerCountry = "PY"
	CreatePartnerCountryPe CreatePartnerCountry = "PE"
	CreatePartnerCountryPh CreatePartnerCountry = "PH"
	CreatePartnerCountryPn CreatePartnerCountry = "PN"
	CreatePartnerCountryPl CreatePartnerCountry = "PL"
	CreatePartnerCountryPt CreatePartnerCountry = "PT"
	CreatePartnerCountryPr CreatePartnerCountry = "PR"
	CreatePartnerCountryQa CreatePartnerCountry = "QA"
	CreatePartnerCountryRe CreatePartnerCountry = "RE"
	CreatePartnerCountryRo CreatePartnerCountry = "RO"
	CreatePartnerCountryRu CreatePartnerCountry = "RU"
	CreatePartnerCountryRw CreatePartnerCountry = "RW"
	CreatePartnerCountrySh CreatePartnerCountry = "SH"
	CreatePartnerCountryKn CreatePartnerCountry = "KN"
	CreatePartnerCountryLc CreatePartnerCountry = "LC"
	CreatePartnerCountryPm CreatePartnerCountry = "PM"
	CreatePartnerCountryVc CreatePartnerCountry = "VC"
	CreatePartnerCountryWs CreatePartnerCountry = "WS"
	CreatePartnerCountrySm CreatePartnerCountry = "SM"
	CreatePartnerCountrySt CreatePartnerCountry = "ST"
	CreatePartnerCountrySa CreatePartnerCountry = "SA"
	CreatePartnerCountrySn CreatePartnerCountry = "SN"
	CreatePartnerCountrySc CreatePartnerCountry = "SC"
	CreatePartnerCountrySl CreatePartnerCountry = "SL"
	CreatePartnerCountrySg CreatePartnerCountry = "SG"
	CreatePartnerCountrySk CreatePartnerCountry = "SK"
	CreatePartnerCountrySi CreatePartnerCountry = "SI"
	CreatePartnerCountrySb CreatePartnerCountry = "SB"
	CreatePartnerCountrySo CreatePartnerCountry = "SO"
	CreatePartnerCountryZa CreatePartnerCountry = "ZA"
	CreatePartnerCountryGs CreatePartnerCountry = "GS"
	CreatePartnerCountryEs CreatePartnerCountry = "ES"
	CreatePartnerCountryLk CreatePartnerCountry = "LK"
	CreatePartnerCountrySd CreatePartnerCountry = "SD"
	CreatePartnerCountrySr CreatePartnerCountry = "SR"
	CreatePartnerCountrySj CreatePartnerCountry = "SJ"
	CreatePartnerCountrySz CreatePartnerCountry = "SZ"
	CreatePartnerCountrySe CreatePartnerCountry = "SE"
	CreatePartnerCountryCh CreatePartnerCountry = "CH"
	CreatePartnerCountrySy CreatePartnerCountry = "SY"
	CreatePartnerCountryTw CreatePartnerCountry = "TW"
	CreatePartnerCountryTj CreatePartnerCountry = "TJ"
	CreatePartnerCountryTz CreatePartnerCountry = "TZ"
	CreatePartnerCountryTh CreatePartnerCountry = "TH"
	CreatePartnerCountryTl CreatePartnerCountry = "TL"
	CreatePartnerCountryTg CreatePartnerCountry = "TG"
	CreatePartnerCountryTk CreatePartnerCountry = "TK"
	CreatePartnerCountryTo CreatePartnerCountry = "TO"
	CreatePartnerCountryTt CreatePartnerCountry = "TT"
	CreatePartnerCountryTn CreatePartnerCountry = "TN"
	CreatePartnerCountryTr CreatePartnerCountry = "TR"
	CreatePartnerCountryTm CreatePartnerCountry = "TM"
	CreatePartnerCountryTc CreatePartnerCountry = "TC"
	CreatePartnerCountryTv CreatePartnerCountry = "TV"
	CreatePartnerCountryUg CreatePartnerCountry = "UG"
	CreatePartnerCountryUa CreatePartnerCountry = "UA"
	CreatePartnerCountryAe CreatePartnerCountry = "AE"
	CreatePartnerCountryGb CreatePartnerCountry = "GB"
	CreatePartnerCountryUs CreatePartnerCountry = "US"
	CreatePartnerCountryUm CreatePartnerCountry = "UM"
	CreatePartnerCountryUy CreatePartnerCountry = "UY"
	CreatePartnerCountryUz CreatePartnerCountry = "UZ"
	CreatePartnerCountryVu CreatePartnerCountry = "VU"
	CreatePartnerCountryVe CreatePartnerCountry = "VE"
	CreatePartnerCountryVn CreatePartnerCountry = "VN"
	CreatePartnerCountryVg CreatePartnerCountry = "VG"
	CreatePartnerCountryVi CreatePartnerCountry = "VI"
	CreatePartnerCountryWf CreatePartnerCountry = "WF"
	CreatePartnerCountryEh CreatePartnerCountry = "EH"
	CreatePartnerCountryYe CreatePartnerCountry = "YE"
	CreatePartnerCountryZm CreatePartnerCountry = "ZM"
	CreatePartnerCountryZw CreatePartnerCountry = "ZW"
	CreatePartnerCountryAx CreatePartnerCountry = "AX"
	CreatePartnerCountryBq CreatePartnerCountry = "BQ"
	CreatePartnerCountryCw CreatePartnerCountry = "CW"
	CreatePartnerCountryGg CreatePartnerCountry = "GG"
	CreatePartnerCountryIm CreatePartnerCountry = "IM"
	CreatePartnerCountryJe CreatePartnerCountry = "JE"
	CreatePartnerCountryMe CreatePartnerCountry = "ME"
	CreatePartnerCountryBl CreatePartnerCountry = "BL"
	CreatePartnerCountryMf CreatePartnerCountry = "MF"
	CreatePartnerCountryRs CreatePartnerCountry = "RS"
	CreatePartnerCountrySx CreatePartnerCountry = "SX"
	CreatePartnerCountrySs CreatePartnerCountry = "SS"
	CreatePartnerCountryXk CreatePartnerCountry = "XK"
)

func (e CreatePartnerCountry) ToPointer() *CreatePartnerCountry {
	return &e
}
func (e *CreatePartnerCountry) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AF":
		fallthrough
	case "AL":
		fallthrough
	case "DZ":
		fallthrough
	case "AS":
		fallthrough
	case "AD":
		fallthrough
	case "AO":
		fallthrough
	case "AI":
		fallthrough
	case "AQ":
		fallthrough
	case "AG":
		fallthrough
	case "AR":
		fallthrough
	case "AM":
		fallthrough
	case "AW":
		fallthrough
	case "AU":
		fallthrough
	case "AT":
		fallthrough
	case "AZ":
		fallthrough
	case "BS":
		fallthrough
	case "BH":
		fallthrough
	case "BD":
		fallthrough
	case "BB":
		fallthrough
	case "BY":
		fallthrough
	case "BE":
		fallthrough
	case "BZ":
		fallthrough
	case "BJ":
		fallthrough
	case "BM":
		fallthrough
	case "BT":
		fallthrough
	case "BO":
		fallthrough
	case "BA":
		fallthrough
	case "BW":
		fallthrough
	case "BV":
		fallthrough
	case "BR":
		fallthrough
	case "IO":
		fallthrough
	case "BN":
		fallthrough
	case "BG":
		fallthrough
	case "BF":
		fallthrough
	case "BI":
		fallthrough
	case "KH":
		fallthrough
	case "CM":
		fallthrough
	case "CA":
		fallthrough
	case "CV":
		fallthrough
	case "KY":
		fallthrough
	case "CF":
		fallthrough
	case "TD":
		fallthrough
	case "CL":
		fallthrough
	case "CN":
		fallthrough
	case "CX":
		fallthrough
	case "CC":
		fallthrough
	case "CO":
		fallthrough
	case "KM":
		fallthrough
	case "CG":
		fallthrough
	case "CD":
		fallthrough
	case "CK":
		fallthrough
	case "CR":
		fallthrough
	case "CI":
		fallthrough
	case "HR":
		fallthrough
	case "CU":
		fallthrough
	case "CY":
		fallthrough
	case "CZ":
		fallthrough
	case "DK":
		fallthrough
	case "DJ":
		fallthrough
	case "DM":
		fallthrough
	case "DO":
		fallthrough
	case "EC":
		fallthrough
	case "EG":
		fallthrough
	case "SV":
		fallthrough
	case "GQ":
		fallthrough
	case "ER":
		fallthrough
	case "EE":
		fallthrough
	case "ET":
		fallthrough
	case "FK":
		fallthrough
	case "FO":
		fallthrough
	case "FJ":
		fallthrough
	case "FI":
		fallthrough
	case "FR":
		fallthrough
	case "GF":
		fallthrough
	case "PF":
		fallthrough
	case "TF":
		fallthrough
	case "GA":
		fallthrough
	case "GM":
		fallthrough
	case "GE":
		fallthrough
	case "DE":
		fallthrough
	case "GH":
		fallthrough
	case "GI":
		fallthrough
	case "GR":
		fallthrough
	case "GL":
		fallthrough
	case "GD":
		fallthrough
	case "GP":
		fallthrough
	case "GU":
		fallthrough
	case "GT":
		fallthrough
	case "GN":
		fallthrough
	case "GW":
		fallthrough
	case "GY":
		fallthrough
	case "HT":
		fallthrough
	case "HM":
		fallthrough
	case "VA":
		fallthrough
	case "HN":
		fallthrough
	case "HK":
		fallthrough
	case "HU":
		fallthrough
	case "IS":
		fallthrough
	case "IN":
		fallthrough
	case "ID":
		fallthrough
	case "IR":
		fallthrough
	case "IQ":
		fallthrough
	case "IE":
		fallthrough
	case "IL":
		fallthrough
	case "IT":
		fallthrough
	case "JM":
		fallthrough
	case "JP":
		fallthrough
	case "JO":
		fallthrough
	case "KZ":
		fallthrough
	case "KE":
		fallthrough
	case "KI":
		fallthrough
	case "KP":
		fallthrough
	case "KR":
		fallthrough
	case "KW":
		fallthrough
	case "KG":
		fallthrough
	case "LA":
		fallthrough
	case "LV":
		fallthrough
	case "LB":
		fallthrough
	case "LS":
		fallthrough
	case "LR":
		fallthrough
	case "LY":
		fallthrough
	case "LI":
		fallthrough
	case "LT":
		fallthrough
	case "LU":
		fallthrough
	case "MO":
		fallthrough
	case "MG":
		fallthrough
	case "MW":
		fallthrough
	case "MY":
		fallthrough
	case "MV":
		fallthrough
	case "ML":
		fallthrough
	case "MT":
		fallthrough
	case "MH":
		fallthrough
	case "MQ":
		fallthrough
	case "MR":
		fallthrough
	case "MU":
		fallthrough
	case "YT":
		fallthrough
	case "MX":
		fallthrough
	case "FM":
		fallthrough
	case "MD":
		fallthrough
	case "MC":
		fallthrough
	case "MN":
		fallthrough
	case "MS":
		fallthrough
	case "MA":
		fallthrough
	case "MZ":
		fallthrough
	case "MM":
		fallthrough
	case "NA":
		fallthrough
	case "NR":
		fallthrough
	case "NP":
		fallthrough
	case "NL":
		fallthrough
	case "NC":
		fallthrough
	case "NZ":
		fallthrough
	case "NI":
		fallthrough
	case "NE":
		fallthrough
	case "NG":
		fallthrough
	case "NU":
		fallthrough
	case "NF":
		fallthrough
	case "MK":
		fallthrough
	case "MP":
		fallthrough
	case "NO":
		fallthrough
	case "OM":
		fallthrough
	case "PK":
		fallthrough
	case "PW":
		fallthrough
	case "PS":
		fallthrough
	case "PA":
		fallthrough
	case "PG":
		fallthrough
	case "PY":
		fallthrough
	case "PE":
		fallthrough
	case "PH":
		fallthrough
	case "PN":
		fallthrough
	case "PL":
		fallthrough
	case "PT":
		fallthrough
	case "PR":
		fallthrough
	case "QA":
		fallthrough
	case "RE":
		fallthrough
	case "RO":
		fallthrough
	case "RU":
		fallthrough
	case "RW":
		fallthrough
	case "SH":
		fallthrough
	case "KN":
		fallthrough
	case "LC":
		fallthrough
	case "PM":
		fallthrough
	case "VC":
		fallthrough
	case "WS":
		fallthrough
	case "SM":
		fallthrough
	case "ST":
		fallthrough
	case "SA":
		fallthrough
	case "SN":
		fallthrough
	case "SC":
		fallthrough
	case "SL":
		fallthrough
	case "SG":
		fallthrough
	case "SK":
		fallthrough
	case "SI":
		fallthrough
	case "SB":
		fallthrough
	case "SO":
		fallthrough
	case "ZA":
		fallthrough
	case "GS":
		fallthrough
	case "ES":
		fallthrough
	case "LK":
		fallthrough
	case "SD":
		fallthrough
	case "SR":
		fallthrough
	case "SJ":
		fallthrough
	case "SZ":
		fallthrough
	case "SE":
		fallthrough
	case "CH":
		fallthrough
	case "SY":
		fallthrough
	case "TW":
		fallthrough
	case "TJ":
		fallthrough
	case "TZ":
		fallthrough
	case "TH":
		fallthrough
	case "TL":
		fallthrough
	case "TG":
		fallthrough
	case "TK":
		fallthrough
	case "TO":
		fallthrough
	case "TT":
		fallthrough
	case "TN":
		fallthrough
	case "TR":
		fallthrough
	case "TM":
		fallthrough
	case "TC":
		fallthrough
	case "TV":
		fallthrough
	case "UG":
		fallthrough
	case "UA":
		fallthrough
	case "AE":
		fallthrough
	case "GB":
		fallthrough
	case "US":
		fallthrough
	case "UM":
		fallthrough
	case "UY":
		fallthrough
	case "UZ":
		fallthrough
	case "VU":
		fallthrough
	case "VE":
		fallthrough
	case "VN":
		fallthrough
	case "VG":
		fallthrough
	case "VI":
		fallthrough
	case "WF":
		fallthrough
	case "EH":
		fallthrough
	case "YE":
		fallthrough
	case "ZM":
		fallthrough
	case "ZW":
		fallthrough
	case "AX":
		fallthrough
	case "BQ":
		fallthrough
	case "CW":
		fallthrough
	case "GG":
		fallthrough
	case "IM":
		fallthrough
	case "JE":
		fallthrough
	case "ME":
		fallthrough
	case "BL":
		fallthrough
	case "MF":
		fallthrough
	case "RS":
		fallthrough
	case "SX":
		fallthrough
	case "SS":
		fallthrough
	case "XK":
		*e = CreatePartnerCountry(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePartnerCountry: %v", v)
	}
}

type CreatePartnerTagIdsType string

const (
	CreatePartnerTagIdsTypeStr        CreatePartnerTagIdsType = "str"
	CreatePartnerTagIdsTypeArrayOfStr CreatePartnerTagIdsType = "arrayOfStr"
)

// CreatePartnerTagIds - The unique IDs of the tags assigned to the short link.
type CreatePartnerTagIds struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CreatePartnerTagIdsType
}

func CreateCreatePartnerTagIdsStr(str string) CreatePartnerTagIds {
	typ := CreatePartnerTagIdsTypeStr

	return CreatePartnerTagIds{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreatePartnerTagIdsArrayOfStr(arrayOfStr []string) CreatePartnerTagIds {
	typ := CreatePartnerTagIdsTypeArrayOfStr

	return CreatePartnerTagIds{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreatePartnerTagIds) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreatePartnerTagIdsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreatePartnerTagIdsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreatePartnerTagIds", string(data))
}

func (u CreatePartnerTagIds) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreatePartnerTagIds: all fields are null")
}

type CreatePartnerTagNamesType string

const (
	CreatePartnerTagNamesTypeStr        CreatePartnerTagNamesType = "str"
	CreatePartnerTagNamesTypeArrayOfStr CreatePartnerTagNamesType = "arrayOfStr"
)

// CreatePartnerTagNames - The unique name of the tags assigned to the short link (case insensitive).
type CreatePartnerTagNames struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CreatePartnerTagNamesType
}

func CreateCreatePartnerTagNamesStr(str string) CreatePartnerTagNames {
	typ := CreatePartnerTagNamesTypeStr

	return CreatePartnerTagNames{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreatePartnerTagNamesArrayOfStr(arrayOfStr []string) CreatePartnerTagNames {
	typ := CreatePartnerTagNamesTypeArrayOfStr

	return CreatePartnerTagNames{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreatePartnerTagNames) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreatePartnerTagNamesTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreatePartnerTagNamesTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreatePartnerTagNames", string(data))
}

func (u CreatePartnerTagNames) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreatePartnerTagNames: all fields are null")
}

type CreatePartnerTestVariant struct {
	URL        string  `json:"url"`
	Percentage float64 `json:"percentage"`
}

func (o *CreatePartnerTestVariant) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreatePartnerTestVariant) GetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Percentage
}

// CreatePartnerLinkProps - Additional properties that you can pass to the partner's short link. Will be used to override the default link properties for this partner.
type CreatePartnerLinkProps struct {
	// The length of the short link slug. Defaults to 7 if not provided. When used with `prefix`, the total length of the key will be `prefix.length + keyLength`.
	KeyLength *float64 `json:"keyLength,omitempty"`
	// The ID of the link in your database. If set, it can be used to identify the link in future API requests (must be prefixed with 'ext_' when passed as a query parameter). This key is unique across your workspace.
	ExternalID *string `json:"externalId,omitempty"`
	// The ID of the tenant that created the link inside your system. If set, it can be used to fetch all links for a tenant.
	TenantID *string `json:"tenantId,omitempty"`
	// The prefix of the short link slug for randomly-generated keys (e.g. if prefix is `/c/`, generated keys will be in the `/c/:key` format). Will be ignored if `key` is provided.
	Prefix *string `json:"prefix,omitempty"`
	// Whether the short link is archived. Defaults to `false` if not provided.
	Archived *bool `json:"archived,omitempty"`
	// The unique IDs of the tags assigned to the short link.
	TagIds *CreatePartnerTagIds `json:"tagIds,omitempty"`
	// The unique name of the tags assigned to the short link (case insensitive).
	TagNames *CreatePartnerTagNames `json:"tagNames,omitempty"`
	// The unique ID existing folder to assign the short link to.
	FolderID *string `json:"folderId,omitempty"`
	// The comments for the short link.
	Comments *string `json:"comments,omitempty"`
	// The date and time when the short link will expire at.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The URL to redirect to when the short link has expired.
	ExpiredURL *string `json:"expiredUrl,omitempty"`
	// The password required to access the destination URL of the short link.
	Password *string `json:"password,omitempty"`
	// Whether the short link uses Custom Link Previews feature. Defaults to `false` if not provided.
	Proxy *bool `json:"proxy,omitempty"`
	// The custom link preview title (og:title). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
	Title *string `json:"title,omitempty"`
	// The custom link preview description (og:description). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
	Description *string `json:"description,omitempty"`
	// The custom link preview image (og:image). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
	Image *string `json:"image,omitempty"`
	// The custom link preview video (og:video). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
	Video *string `json:"video,omitempty"`
	// Whether the short link uses link cloaking. Defaults to `false` if not provided.
	Rewrite *bool `json:"rewrite,omitempty"`
	// The iOS destination URL for the short link for iOS device targeting.
	Ios *string `json:"ios,omitempty"`
	// The Android destination URL for the short link for Android device targeting.
	Android *string `json:"android,omitempty"`
	// Allow search engines to index your short link. Defaults to `false` if not provided. Learn more: https://d.to/noindex
	DoIndex *bool `json:"doIndex,omitempty"`
	// The UTM source of the short link. If set, this will populate or override the UTM source in the destination URL.
	UtmSource *string `json:"utm_source,omitempty"`
	// The UTM medium of the short link. If set, this will populate or override the UTM medium in the destination URL.
	UtmMedium *string `json:"utm_medium,omitempty"`
	// The UTM campaign of the short link. If set, this will populate or override the UTM campaign in the destination URL.
	UtmCampaign *string `json:"utm_campaign,omitempty"`
	// The UTM term of the short link. If set, this will populate or override the UTM term in the destination URL.
	UtmTerm *string `json:"utm_term,omitempty"`
	// The UTM content of the short link. If set, this will populate or override the UTM content in the destination URL.
	UtmContent *string `json:"utm_content,omitempty"`
	// The referral tag of the short link. If set, this will populate or override the `ref` query parameter in the destination URL.
	Ref *string `json:"ref,omitempty"`
	// An array of A/B test URLs and the percentage of traffic to send to each URL.
	TestVariants []CreatePartnerTestVariant `json:"testVariants,omitempty"`
	// The date and time when the tests started.
	TestStartedAt *string `json:"testStartedAt,omitempty"`
	// The date and time when the tests were or will be completed.
	TestCompletedAt *string `json:"testCompletedAt,omitempty"`
}

func (o *CreatePartnerLinkProps) GetKeyLength() *float64 {
	if o == nil {
		return nil
	}
	return o.KeyLength
}

func (o *CreatePartnerLinkProps) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *CreatePartnerLinkProps) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *CreatePartnerLinkProps) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *CreatePartnerLinkProps) GetArchived() *bool {
	if o == nil {
		return nil
	}
	return o.Archived
}

func (o *CreatePartnerLinkProps) GetTagIds() *CreatePartnerTagIds {
	if o == nil {
		return nil
	}
	return o.TagIds
}

func (o *CreatePartnerLinkProps) GetTagNames() *CreatePartnerTagNames {
	if o == nil {
		return nil
	}
	return o.TagNames
}

func (o *CreatePartnerLinkProps) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

func (o *CreatePartnerLinkProps) GetComments() *string {
	if o == nil {
		return nil
	}
	return o.Comments
}

func (o *CreatePartnerLinkProps) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *CreatePartnerLinkProps) GetExpiredURL() *string {
	if o == nil {
		return nil
	}
	return o.ExpiredURL
}

func (o *CreatePartnerLinkProps) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *CreatePartnerLinkProps) GetProxy() *bool {
	if o == nil {
		return nil
	}
	return o.Proxy
}

func (o *CreatePartnerLinkProps) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CreatePartnerLinkProps) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreatePartnerLinkProps) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *CreatePartnerLinkProps) GetVideo() *string {
	if o == nil {
		return nil
	}
	return o.Video
}

func (o *CreatePartnerLinkProps) GetRewrite() *bool {
	if o == nil {
		return nil
	}
	return o.Rewrite
}

func (o *CreatePartnerLinkProps) GetIos() *string {
	if o == nil {
		return nil
	}
	return o.Ios
}

func (o *CreatePartnerLinkProps) GetAndroid() *string {
	if o == nil {
		return nil
	}
	return o.Android
}

func (o *CreatePartnerLinkProps) GetDoIndex() *bool {
	if o == nil {
		return nil
	}
	return o.DoIndex
}

func (o *CreatePartnerLinkProps) GetUtmSource() *string {
	if o == nil {
		return nil
	}
	return o.UtmSource
}

func (o *CreatePartnerLinkProps) GetUtmMedium() *string {
	if o == nil {
		return nil
	}
	return o.UtmMedium
}

func (o *CreatePartnerLinkProps) GetUtmCampaign() *string {
	if o == nil {
		return nil
	}
	return o.UtmCampaign
}

func (o *CreatePartnerLinkProps) GetUtmTerm() *string {
	if o == nil {
		return nil
	}
	return o.UtmTerm
}

func (o *CreatePartnerLinkProps) GetUtmContent() *string {
	if o == nil {
		return nil
	}
	return o.UtmContent
}

func (o *CreatePartnerLinkProps) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CreatePartnerLinkProps) GetTestVariants() []CreatePartnerTestVariant {
	if o == nil {
		return nil
	}
	return o.TestVariants
}

func (o *CreatePartnerLinkProps) GetTestStartedAt() *string {
	if o == nil {
		return nil
	}
	return o.TestStartedAt
}

func (o *CreatePartnerLinkProps) GetTestCompletedAt() *string {
	if o == nil {
		return nil
	}
	return o.TestCompletedAt
}

type CreatePartnerRequest struct {
	// Full legal name of the partner.
	Name string `json:"name"`
	// Email for the partner in your system. Partners will be able to claim their profile by signing up to Dub Partners with this email.
	Email string `json:"email"`
	// A unique username for the partner in your system (max 100 characters). This will be used to create a short link for the partner using your program's default domain. If not provided, Dub will try to generate a username from the partner's name or email.
	Username *string `json:"username,omitempty"`
	// Avatar image for the partner – if not provided, a default avatar will be used.
	Image *string `json:"image,omitempty"`
	// Country where the partner is based.
	Country *CreatePartnerCountry `json:"country,omitempty"`
	// A brief description of the partner and their background.
	Description *string `json:"description,omitempty"`
	// The ID of the partner in your system.
	TenantID *string `json:"tenantId,omitempty"`
	// Additional properties that you can pass to the partner's short link. Will be used to override the default link properties for this partner.
	LinkProps *CreatePartnerLinkProps `json:"linkProps,omitempty"`
}

func (o *CreatePartnerRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreatePartnerRequest) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *CreatePartnerRequest) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *CreatePartnerRequest) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *CreatePartnerRequest) GetCountry() *CreatePartnerCountry {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *CreatePartnerRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreatePartnerRequest) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *CreatePartnerRequest) GetLinkProps() *CreatePartnerLinkProps {
	if o == nil {
		return nil
	}
	return o.LinkProps
}

// CreatePartnerStatus - The status of the partner's enrollment in the program.
type CreatePartnerStatus string

const (
	CreatePartnerStatusPending  CreatePartnerStatus = "pending"
	CreatePartnerStatusApproved CreatePartnerStatus = "approved"
	CreatePartnerStatusRejected CreatePartnerStatus = "rejected"
	CreatePartnerStatusInvited  CreatePartnerStatus = "invited"
	CreatePartnerStatusDeclined CreatePartnerStatus = "declined"
	CreatePartnerStatusBanned   CreatePartnerStatus = "banned"
	CreatePartnerStatusArchived CreatePartnerStatus = "archived"
)

func (e CreatePartnerStatus) ToPointer() *CreatePartnerStatus {
	return &e
}
func (e *CreatePartnerStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "approved":
		fallthrough
	case "rejected":
		fallthrough
	case "invited":
		fallthrough
	case "declined":
		fallthrough
	case "banned":
		fallthrough
	case "archived":
		*e = CreatePartnerStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePartnerStatus: %v", v)
	}
}

type CreatePartnerLink struct {
	// The unique ID of the short link.
	ID string `json:"id"`
	// The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
	Domain string `json:"domain"`
	// The short link slug. If not provided, a random 7-character slug will be generated.
	Key string `json:"key"`
	// The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
	ShortLink string `json:"shortLink"`
	// The destination URL of the short link.
	URL string `json:"url"`
	// The number of clicks on the short link.
	Clicks *float64 `default:"0" json:"clicks"`
	// The number of leads the short links has generated.
	Leads *float64 `default:"0" json:"leads"`
	// The number of sales the short links has generated.
	Sales *float64 `default:"0" json:"sales"`
	// The total dollar amount of sales the short links has generated (in cents).
	SaleAmount *float64 `default:"0" json:"saleAmount"`
}

func (c CreatePartnerLink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePartnerLink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatePartnerLink) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreatePartnerLink) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *CreatePartnerLink) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreatePartnerLink) GetShortLink() string {
	if o == nil {
		return ""
	}
	return o.ShortLink
}

func (o *CreatePartnerLink) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreatePartnerLink) GetClicks() *float64 {
	if o == nil {
		return nil
	}
	return o.Clicks
}

func (o *CreatePartnerLink) GetLeads() *float64 {
	if o == nil {
		return nil
	}
	return o.Leads
}

func (o *CreatePartnerLink) GetSales() *float64 {
	if o == nil {
		return nil
	}
	return o.Sales
}

func (o *CreatePartnerLink) GetSaleAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.SaleAmount
}

// CreatePartnerResponseBody - The created partner
type CreatePartnerResponseBody struct {
	// The partner's unique ID on Dub.
	ID string `json:"id"`
	// The partner's full legal name.
	Name string `json:"name"`
	// The partner's email address. Should be a unique value across Dub.
	Email *string `json:"email"`
	// The partner's avatar image.
	Image *string `json:"image"`
	// A brief description of the partner and their background.
	Description *string `json:"description,omitempty"`
	// The partner's country (required for tax purposes).
	Country *string `json:"country"`
	// The partner's website URL (including the https protocol).
	Website *string `json:"website"`
	// The partner's YouTube channel username (e.g. `johndoe`).
	Youtube *string `json:"youtube"`
	// The partner's Twitter username (e.g. `johndoe`).
	Twitter *string `json:"twitter"`
	// The partner's LinkedIn username (e.g. `johndoe`).
	Linkedin *string `json:"linkedin"`
	// The partner's Instagram username (e.g. `johndoe`).
	Instagram *string `json:"instagram"`
	// The partner's TikTok username (e.g. `johndoe`).
	Tiktok *string `json:"tiktok"`
	// The partner's PayPal email (for receiving payouts via PayPal).
	PaypalEmail *string `json:"paypalEmail"`
	// The partner's Stripe Connect ID (for receiving payouts via Stripe).
	StripeConnectID *string `json:"stripeConnectId"`
	// The date when the partner enabled payouts.
	PayoutsEnabledAt *string `json:"payoutsEnabledAt"`
	// The date when the partner was created on Dub.
	CreatedAt string `json:"createdAt"`
	// The status of the partner's enrollment in the program.
	Status CreatePartnerStatus `json:"status"`
	// The program's unique ID on Dub.
	ProgramID string `json:"programId"`
	// The partner's unique ID within your database. Can be useful for associating the partner with a user in your database and retrieving/update their data in the future.
	TenantID *string `json:"tenantId"`
	// The partner's referral links in this program.
	Links []CreatePartnerLink `json:"links"`
	// The total number of clicks on the partner's links.
	Clicks *float64 `default:"0" json:"clicks"`
	// The total number of leads generated by the partner's links.
	Leads *float64 `default:"0" json:"leads"`
	// The total number of sales generated by the partner's links.
	Sales *float64 `default:"0" json:"sales"`
	// The total amount of sales (in cents) generated by the partner's links.
	SaleAmount *float64 `default:"0" json:"saleAmount"`
	// The total commissions paid to the partner for their referrals.
	TotalCommissions *float64 `default:"0" json:"totalCommissions"`
	// The total net revenue generated by the partner.
	NetRevenue *float64 `default:"0" json:"netRevenue"`
	// DEPRECATED: The total earnings/commissions accrued by the partner's links.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Earnings *float64 `default:"0" json:"earnings"`
}

func (c CreatePartnerResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePartnerResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatePartnerResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreatePartnerResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreatePartnerResponseBody) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreatePartnerResponseBody) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *CreatePartnerResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreatePartnerResponseBody) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *CreatePartnerResponseBody) GetWebsite() *string {
	if o == nil {
		return nil
	}
	return o.Website
}

func (o *CreatePartnerResponseBody) GetYoutube() *string {
	if o == nil {
		return nil
	}
	return o.Youtube
}

func (o *CreatePartnerResponseBody) GetTwitter() *string {
	if o == nil {
		return nil
	}
	return o.Twitter
}

func (o *CreatePartnerResponseBody) GetLinkedin() *string {
	if o == nil {
		return nil
	}
	return o.Linkedin
}

func (o *CreatePartnerResponseBody) GetInstagram() *string {
	if o == nil {
		return nil
	}
	return o.Instagram
}

func (o *CreatePartnerResponseBody) GetTiktok() *string {
	if o == nil {
		return nil
	}
	return o.Tiktok
}

func (o *CreatePartnerResponseBody) GetPaypalEmail() *string {
	if o == nil {
		return nil
	}
	return o.PaypalEmail
}

func (o *CreatePartnerResponseBody) GetStripeConnectID() *string {
	if o == nil {
		return nil
	}
	return o.StripeConnectID
}

func (o *CreatePartnerResponseBody) GetPayoutsEnabledAt() *string {
	if o == nil {
		return nil
	}
	return o.PayoutsEnabledAt
}

func (o *CreatePartnerResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreatePartnerResponseBody) GetStatus() CreatePartnerStatus {
	if o == nil {
		return CreatePartnerStatus("")
	}
	return o.Status
}

func (o *CreatePartnerResponseBody) GetProgramID() string {
	if o == nil {
		return ""
	}
	return o.ProgramID
}

func (o *CreatePartnerResponseBody) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *CreatePartnerResponseBody) GetLinks() []CreatePartnerLink {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *CreatePartnerResponseBody) GetClicks() *float64 {
	if o == nil {
		return nil
	}
	return o.Clicks
}

func (o *CreatePartnerResponseBody) GetLeads() *float64 {
	if o == nil {
		return nil
	}
	return o.Leads
}

func (o *CreatePartnerResponseBody) GetSales() *float64 {
	if o == nil {
		return nil
	}
	return o.Sales
}

func (o *CreatePartnerResponseBody) GetSaleAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.SaleAmount
}

func (o *CreatePartnerResponseBody) GetTotalCommissions() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalCommissions
}

func (o *CreatePartnerResponseBody) GetNetRevenue() *float64 {
	if o == nil {
		return nil
	}
	return o.NetRevenue
}

func (o *CreatePartnerResponseBody) GetEarnings() *float64 {
	if o == nil {
		return nil
	}
	return o.Earnings
}

type CreatePartnerResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The created partner
	Object *CreatePartnerResponseBody
	// The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
	FourHundred *shared.FourHundred
	// Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
	FourHundredAndOne *shared.FourHundredAndOne
	// The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
	FourHundredAndThree *shared.FourHundredAndThree
	// The server cannot find the requested resource.
	FourHundredAndFour *shared.FourHundredAndFour
	// This response is sent when a request conflicts with the current state of the server.
	FourHundredAndNine *shared.FourHundredAndNine
	// This response is sent when the requested content has been permanently deleted from server, with no forwarding address.
	FourHundredAndTen *shared.FourHundredAndTen
	// The request was well-formed but was unable to be followed due to semantic errors.
	FourHundredAndTwentyTwo *shared.FourHundredAndTwentyTwo
	// The user has sent too many requests in a given amount of time ("rate limiting")
	FourHundredAndTwentyNine *shared.FourHundredAndTwentyNine
	// The server has encountered a situation it does not know how to handle.
	FiveHundred *shared.FiveHundred
}

func (o *CreatePartnerResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreatePartnerResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreatePartnerResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreatePartnerResponse) GetObject() *CreatePartnerResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *CreatePartnerResponse) GetFourHundred() *shared.FourHundred {
	if o == nil {
		return nil
	}
	return o.FourHundred
}

func (o *CreatePartnerResponse) GetFourHundredAndOne() *shared.FourHundredAndOne {
	if o == nil {
		return nil
	}
	return o.FourHundredAndOne
}

func (o *CreatePartnerResponse) GetFourHundredAndThree() *shared.FourHundredAndThree {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThree
}

func (o *CreatePartnerResponse) GetFourHundredAndFour() *shared.FourHundredAndFour {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFour
}

func (o *CreatePartnerResponse) GetFourHundredAndNine() *shared.FourHundredAndNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndNine
}

func (o *CreatePartnerResponse) GetFourHundredAndTen() *shared.FourHundredAndTen {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTen
}

func (o *CreatePartnerResponse) GetFourHundredAndTwentyTwo() *shared.FourHundredAndTwentyTwo {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyTwo
}

func (o *CreatePartnerResponse) GetFourHundredAndTwentyNine() *shared.FourHundredAndTwentyNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyNine
}

func (o *CreatePartnerResponse) GetFiveHundred() *shared.FiveHundred {
	if o == nil {
		return nil
	}
	return o.FiveHundred
}
