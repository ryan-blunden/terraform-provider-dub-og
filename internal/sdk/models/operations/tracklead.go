// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/models/shared"
	"net/http"
)

// Mode - The mode to use for tracking the lead event. `async` will not block the request; `wait` will block the request until the lead event is fully recorded in Dub.
type Mode string

const (
	ModeAsync Mode = "async"
	ModeWait  Mode = "wait"
)

func (e Mode) ToPointer() *Mode {
	return &e
}
func (e *Mode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "async":
		fallthrough
	case "wait":
		*e = Mode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mode: %v", v)
	}
}

type TrackLeadRequest struct {
	// The unique ID of the click that the lead conversion event is attributed to. You can read this value from `dub_id` cookie.
	ClickID string `json:"clickId"`
	// The name of the lead event to track. Can also be used as a unique identifier to associate a given lead event for a customer for a subsequent sale event (via the `leadEventName` prop in `/track/sale`).
	EventName string `json:"eventName"`
	// The numerical value associated with this lead event (e.g., number of provisioned seats in a free trial). If defined as N, the lead event will be tracked N times.
	EventQuantity *float64 `json:"eventQuantity,omitempty"`
	// The unique ID of the customer in your system. Will be used to identify and attribute all future events to this customer.
	ExternalID string `json:"externalId"`
	// The name of the customer. If not passed, a random name will be generated (e.g. “Big Red Caribou”).
	CustomerName *string `default:"null" json:"customerName"`
	// The email address of the customer.
	CustomerEmail *string `default:"null" json:"customerEmail"`
	// The avatar URL of the customer.
	CustomerAvatar *string `default:"null" json:"customerAvatar"`
	// The mode to use for tracking the lead event. `async` will not block the request; `wait` will block the request until the lead event is fully recorded in Dub.
	Mode *Mode `default:"async" json:"mode"`
	// Additional metadata to be stored with the lead event. Max 10,000 characters.
	Metadata map[string]any `json:"metadata,omitempty"`
}

func (t TrackLeadRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TrackLeadRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TrackLeadRequest) GetClickID() string {
	if o == nil {
		return ""
	}
	return o.ClickID
}

func (o *TrackLeadRequest) GetEventName() string {
	if o == nil {
		return ""
	}
	return o.EventName
}

func (o *TrackLeadRequest) GetEventQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.EventQuantity
}

func (o *TrackLeadRequest) GetExternalID() string {
	if o == nil {
		return ""
	}
	return o.ExternalID
}

func (o *TrackLeadRequest) GetCustomerName() *string {
	if o == nil {
		return nil
	}
	return o.CustomerName
}

func (o *TrackLeadRequest) GetCustomerEmail() *string {
	if o == nil {
		return nil
	}
	return o.CustomerEmail
}

func (o *TrackLeadRequest) GetCustomerAvatar() *string {
	if o == nil {
		return nil
	}
	return o.CustomerAvatar
}

func (o *TrackLeadRequest) GetMode() *Mode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *TrackLeadRequest) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

type Click struct {
	ID string `json:"id"`
}

func (o *Click) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type TrackLeadCustomer struct {
	Name       *string `json:"name"`
	Email      *string `json:"email"`
	Avatar     *string `json:"avatar"`
	ExternalID *string `json:"externalId"`
}

func (o *TrackLeadCustomer) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *TrackLeadCustomer) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *TrackLeadCustomer) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *TrackLeadCustomer) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

// TrackLeadResponseBody - A lead was tracked.
type TrackLeadResponseBody struct {
	Click    Click             `json:"click"`
	Customer TrackLeadCustomer `json:"customer"`
}

func (o *TrackLeadResponseBody) GetClick() Click {
	if o == nil {
		return Click{}
	}
	return o.Click
}

func (o *TrackLeadResponseBody) GetCustomer() TrackLeadCustomer {
	if o == nil {
		return TrackLeadCustomer{}
	}
	return o.Customer
}

type TrackLeadResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A lead was tracked.
	Object *TrackLeadResponseBody
	// The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
	FourHundred *shared.FourHundred
	// Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
	FourHundredAndOne *shared.FourHundredAndOne
	// The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
	FourHundredAndThree *shared.FourHundredAndThree
	// The server cannot find the requested resource.
	FourHundredAndFour *shared.FourHundredAndFour
	// This response is sent when a request conflicts with the current state of the server.
	FourHundredAndNine *shared.FourHundredAndNine
	// This response is sent when the requested content has been permanently deleted from server, with no forwarding address.
	FourHundredAndTen *shared.FourHundredAndTen
	// The request was well-formed but was unable to be followed due to semantic errors.
	FourHundredAndTwentyTwo *shared.FourHundredAndTwentyTwo
	// The user has sent too many requests in a given amount of time ("rate limiting")
	FourHundredAndTwentyNine *shared.FourHundredAndTwentyNine
	// The server has encountered a situation it does not know how to handle.
	FiveHundred *shared.FiveHundred
}

func (o *TrackLeadResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *TrackLeadResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *TrackLeadResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *TrackLeadResponse) GetObject() *TrackLeadResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *TrackLeadResponse) GetFourHundred() *shared.FourHundred {
	if o == nil {
		return nil
	}
	return o.FourHundred
}

func (o *TrackLeadResponse) GetFourHundredAndOne() *shared.FourHundredAndOne {
	if o == nil {
		return nil
	}
	return o.FourHundredAndOne
}

func (o *TrackLeadResponse) GetFourHundredAndThree() *shared.FourHundredAndThree {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThree
}

func (o *TrackLeadResponse) GetFourHundredAndFour() *shared.FourHundredAndFour {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFour
}

func (o *TrackLeadResponse) GetFourHundredAndNine() *shared.FourHundredAndNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndNine
}

func (o *TrackLeadResponse) GetFourHundredAndTen() *shared.FourHundredAndTen {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTen
}

func (o *TrackLeadResponse) GetFourHundredAndTwentyTwo() *shared.FourHundredAndTwentyTwo {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyTwo
}

func (o *TrackLeadResponse) GetFourHundredAndTwentyNine() *shared.FourHundredAndTwentyNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyNine
}

func (o *TrackLeadResponse) GetFiveHundred() *shared.FiveHundred {
	if o == nil {
		return nil
	}
	return o.FiveHundred
}
