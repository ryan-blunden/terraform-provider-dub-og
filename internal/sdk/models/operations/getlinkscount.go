// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/models/shared"
	"net/http"
)

type GetLinksCountTagIdsType string

const (
	GetLinksCountTagIdsTypeStr        GetLinksCountTagIdsType = "str"
	GetLinksCountTagIdsTypeArrayOfStr GetLinksCountTagIdsType = "arrayOfStr"
)

// GetLinksCountTagIds - The tag IDs to filter the links by.
type GetLinksCountTagIds struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type GetLinksCountTagIdsType
}

func CreateGetLinksCountTagIdsStr(str string) GetLinksCountTagIds {
	typ := GetLinksCountTagIdsTypeStr

	return GetLinksCountTagIds{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetLinksCountTagIdsArrayOfStr(arrayOfStr []string) GetLinksCountTagIds {
	typ := GetLinksCountTagIdsTypeArrayOfStr

	return GetLinksCountTagIds{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *GetLinksCountTagIds) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetLinksCountTagIdsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = GetLinksCountTagIdsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetLinksCountTagIds", string(data))
}

func (u GetLinksCountTagIds) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type GetLinksCountTagIds: all fields are null")
}

type GetLinksCountTagNamesType string

const (
	GetLinksCountTagNamesTypeStr        GetLinksCountTagNamesType = "str"
	GetLinksCountTagNamesTypeArrayOfStr GetLinksCountTagNamesType = "arrayOfStr"
)

// GetLinksCountTagNames - The unique name of the tags assigned to the short link (case insensitive).
type GetLinksCountTagNames struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type GetLinksCountTagNamesType
}

func CreateGetLinksCountTagNamesStr(str string) GetLinksCountTagNames {
	typ := GetLinksCountTagNamesTypeStr

	return GetLinksCountTagNames{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetLinksCountTagNamesArrayOfStr(arrayOfStr []string) GetLinksCountTagNames {
	typ := GetLinksCountTagNamesTypeArrayOfStr

	return GetLinksCountTagNames{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *GetLinksCountTagNames) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetLinksCountTagNamesTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = GetLinksCountTagNamesTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetLinksCountTagNames", string(data))
}

func (u GetLinksCountTagNames) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type GetLinksCountTagNames: all fields are null")
}

type GroupByFolderID string

const (
	GroupByFolderIDFolderID GroupByFolderID = "folderId"
)

func (e GroupByFolderID) ToPointer() *GroupByFolderID {
	return &e
}
func (e *GroupByFolderID) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "folderId":
		*e = GroupByFolderID(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupByFolderID: %v", v)
	}
}

type GroupByUserID string

const (
	GroupByUserIDUserID GroupByUserID = "userId"
)

func (e GroupByUserID) ToPointer() *GroupByUserID {
	return &e
}
func (e *GroupByUserID) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "userId":
		*e = GroupByUserID(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupByUserID: %v", v)
	}
}

type GroupByTagID string

const (
	GroupByTagIDTagID GroupByTagID = "tagId"
)

func (e GroupByTagID) ToPointer() *GroupByTagID {
	return &e
}
func (e *GroupByTagID) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tagId":
		*e = GroupByTagID(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupByTagID: %v", v)
	}
}

type GroupByDomain string

const (
	GroupByDomainDomain GroupByDomain = "domain"
)

func (e GroupByDomain) ToPointer() *GroupByDomain {
	return &e
}
func (e *GroupByDomain) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "domain":
		*e = GroupByDomain(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupByDomain: %v", v)
	}
}

type GroupByType string

const (
	GroupByTypeGroupByDomain   GroupByType = "groupBy_Domain"
	GroupByTypeGroupByTagID    GroupByType = "groupBy_TagID"
	GroupByTypeGroupByUserID   GroupByType = "groupBy_UserID"
	GroupByTypeGroupByFolderID GroupByType = "groupBy_FolderID"
)

// GroupBy - The field to group the links by.
type GroupBy struct {
	GroupByDomain   *GroupByDomain   `queryParam:"inline"`
	GroupByTagID    *GroupByTagID    `queryParam:"inline"`
	GroupByUserID   *GroupByUserID   `queryParam:"inline"`
	GroupByFolderID *GroupByFolderID `queryParam:"inline"`

	Type GroupByType
}

func CreateGroupByGroupByDomain(groupByDomain GroupByDomain) GroupBy {
	typ := GroupByTypeGroupByDomain

	return GroupBy{
		GroupByDomain: &groupByDomain,
		Type:          typ,
	}
}

func CreateGroupByGroupByTagID(groupByTagID GroupByTagID) GroupBy {
	typ := GroupByTypeGroupByTagID

	return GroupBy{
		GroupByTagID: &groupByTagID,
		Type:         typ,
	}
}

func CreateGroupByGroupByUserID(groupByUserID GroupByUserID) GroupBy {
	typ := GroupByTypeGroupByUserID

	return GroupBy{
		GroupByUserID: &groupByUserID,
		Type:          typ,
	}
}

func CreateGroupByGroupByFolderID(groupByFolderID GroupByFolderID) GroupBy {
	typ := GroupByTypeGroupByFolderID

	return GroupBy{
		GroupByFolderID: &groupByFolderID,
		Type:            typ,
	}
}

func (u *GroupBy) UnmarshalJSON(data []byte) error {

	var groupByDomain GroupByDomain = GroupByDomain("")
	if err := utils.UnmarshalJSON(data, &groupByDomain, "", true, true); err == nil {
		u.GroupByDomain = &groupByDomain
		u.Type = GroupByTypeGroupByDomain
		return nil
	}

	var groupByTagID GroupByTagID = GroupByTagID("")
	if err := utils.UnmarshalJSON(data, &groupByTagID, "", true, true); err == nil {
		u.GroupByTagID = &groupByTagID
		u.Type = GroupByTypeGroupByTagID
		return nil
	}

	var groupByUserID GroupByUserID = GroupByUserID("")
	if err := utils.UnmarshalJSON(data, &groupByUserID, "", true, true); err == nil {
		u.GroupByUserID = &groupByUserID
		u.Type = GroupByTypeGroupByUserID
		return nil
	}

	var groupByFolderID GroupByFolderID = GroupByFolderID("")
	if err := utils.UnmarshalJSON(data, &groupByFolderID, "", true, true); err == nil {
		u.GroupByFolderID = &groupByFolderID
		u.Type = GroupByTypeGroupByFolderID
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GroupBy", string(data))
}

func (u GroupBy) MarshalJSON() ([]byte, error) {
	if u.GroupByDomain != nil {
		return utils.MarshalJSON(u.GroupByDomain, "", true)
	}

	if u.GroupByTagID != nil {
		return utils.MarshalJSON(u.GroupByTagID, "", true)
	}

	if u.GroupByUserID != nil {
		return utils.MarshalJSON(u.GroupByUserID, "", true)
	}

	if u.GroupByFolderID != nil {
		return utils.MarshalJSON(u.GroupByFolderID, "", true)
	}

	return nil, errors.New("could not marshal union type GroupBy: all fields are null")
}

type GetLinksCountRequest struct {
	// The domain to filter the links by. E.g. `ac.me`. If not provided, all links for the workspace will be returned.
	Domain *string `queryParam:"style=form,explode=true,name=domain"`
	// Deprecated. Use `tagIds` instead. The tag ID to filter the links by.
	TagID *string `queryParam:"style=form,explode=true,name=tagId"`
	// The tag IDs to filter the links by.
	TagIds *GetLinksCountTagIds `queryParam:"style=form,explode=false,name=tagIds"`
	// The unique name of the tags assigned to the short link (case insensitive).
	TagNames *GetLinksCountTagNames `queryParam:"style=form,explode=false,name=tagNames"`
	// The folder ID to filter the links by.
	FolderID *string `queryParam:"style=form,explode=true,name=folderId"`
	// The search term to filter the links by. The search term will be matched against the short link slug and the destination url.
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// The user ID to filter the links by.
	UserID *string `queryParam:"style=form,explode=true,name=userId"`
	// The ID of the tenant that created the link inside your system. If set, will only return links for the specified tenant.
	TenantID *string `queryParam:"style=form,explode=true,name=tenantId"`
	// Whether to include archived links in the response. Defaults to `false` if not provided.
	ShowArchived *bool `default:"false" queryParam:"style=form,explode=true,name=showArchived"`
	// DEPRECATED. Filter for links that have at least one tag assigned to them.
	WithTags *bool `default:"false" queryParam:"style=form,explode=true,name=withTags"`
	// The field to group the links by.
	GroupBy *GroupBy `queryParam:"style=form,explode=true,name=groupBy"`
}

func (g GetLinksCountRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetLinksCountRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetLinksCountRequest) GetDomain() *string {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *GetLinksCountRequest) GetTagID() *string {
	if o == nil {
		return nil
	}
	return o.TagID
}

func (o *GetLinksCountRequest) GetTagIds() *GetLinksCountTagIds {
	if o == nil {
		return nil
	}
	return o.TagIds
}

func (o *GetLinksCountRequest) GetTagNames() *GetLinksCountTagNames {
	if o == nil {
		return nil
	}
	return o.TagNames
}

func (o *GetLinksCountRequest) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

func (o *GetLinksCountRequest) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *GetLinksCountRequest) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *GetLinksCountRequest) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *GetLinksCountRequest) GetShowArchived() *bool {
	if o == nil {
		return nil
	}
	return o.ShowArchived
}

func (o *GetLinksCountRequest) GetWithTags() *bool {
	if o == nil {
		return nil
	}
	return o.WithTags
}

func (o *GetLinksCountRequest) GetGroupBy() *GroupBy {
	if o == nil {
		return nil
	}
	return o.GroupBy
}

type GetLinksCountResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A list of links
	Number *float64
	// The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
	FourHundred *shared.FourHundred
	// Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
	FourHundredAndOne *shared.FourHundredAndOne
	// The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
	FourHundredAndThree *shared.FourHundredAndThree
	// The server cannot find the requested resource.
	FourHundredAndFour *shared.FourHundredAndFour
	// This response is sent when a request conflicts with the current state of the server.
	FourHundredAndNine *shared.FourHundredAndNine
	// This response is sent when the requested content has been permanently deleted from server, with no forwarding address.
	FourHundredAndTen *shared.FourHundredAndTen
	// The request was well-formed but was unable to be followed due to semantic errors.
	FourHundredAndTwentyTwo *shared.FourHundredAndTwentyTwo
	// The user has sent too many requests in a given amount of time ("rate limiting")
	FourHundredAndTwentyNine *shared.FourHundredAndTwentyNine
	// The server has encountered a situation it does not know how to handle.
	FiveHundred *shared.FiveHundred
}

func (o *GetLinksCountResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetLinksCountResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetLinksCountResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetLinksCountResponse) GetNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *GetLinksCountResponse) GetFourHundred() *shared.FourHundred {
	if o == nil {
		return nil
	}
	return o.FourHundred
}

func (o *GetLinksCountResponse) GetFourHundredAndOne() *shared.FourHundredAndOne {
	if o == nil {
		return nil
	}
	return o.FourHundredAndOne
}

func (o *GetLinksCountResponse) GetFourHundredAndThree() *shared.FourHundredAndThree {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThree
}

func (o *GetLinksCountResponse) GetFourHundredAndFour() *shared.FourHundredAndFour {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFour
}

func (o *GetLinksCountResponse) GetFourHundredAndNine() *shared.FourHundredAndNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndNine
}

func (o *GetLinksCountResponse) GetFourHundredAndTen() *shared.FourHundredAndTen {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTen
}

func (o *GetLinksCountResponse) GetFourHundredAndTwentyTwo() *shared.FourHundredAndTwentyTwo {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyTwo
}

func (o *GetLinksCountResponse) GetFourHundredAndTwentyNine() *shared.FourHundredAndTwentyNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyNine
}

func (o *GetLinksCountResponse) GetFiveHundred() *shared.FiveHundred {
	if o == nil {
		return nil
	}
	return o.FiveHundred
}
