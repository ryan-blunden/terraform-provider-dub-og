// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/models/shared"
	"net/http"
)

// GetCustomersSortBy - The field to sort the customers by. The default is `createdAt`.
type GetCustomersSortBy string

const (
	GetCustomersSortByCreatedAt  GetCustomersSortBy = "createdAt"
	GetCustomersSortBySaleAmount GetCustomersSortBy = "saleAmount"
)

func (e GetCustomersSortBy) ToPointer() *GetCustomersSortBy {
	return &e
}
func (e *GetCustomersSortBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "createdAt":
		fallthrough
	case "saleAmount":
		*e = GetCustomersSortBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCustomersSortBy: %v", v)
	}
}

// GetCustomersSortOrder - The sort order. The default is `desc`.
type GetCustomersSortOrder string

const (
	GetCustomersSortOrderAsc  GetCustomersSortOrder = "asc"
	GetCustomersSortOrderDesc GetCustomersSortOrder = "desc"
)

func (e GetCustomersSortOrder) ToPointer() *GetCustomersSortOrder {
	return &e
}
func (e *GetCustomersSortOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetCustomersSortOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCustomersSortOrder: %v", v)
	}
}

type GetCustomersRequest struct {
	// A case-sensitive filter on the list based on the customer's `email` field. The value must be a string. Takes precedence over `externalId`.
	Email *string `queryParam:"style=form,explode=true,name=email"`
	// A case-sensitive filter on the list based on the customer's `externalId` field. The value must be a string. Takes precedence over `search`.
	ExternalID *string `queryParam:"style=form,explode=true,name=externalId"`
	// A search query to filter customers by email, externalId, or name. If `email` or `externalId` is provided, this will be ignored.
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// A filter on the list based on the customer's `country` field.
	Country *string `queryParam:"style=form,explode=true,name=country"`
	// A filter on the list based on the customer's `linkId` field (the referral link ID).
	LinkID *string `queryParam:"style=form,explode=true,name=linkId"`
	// Whether to include expanded fields on the customer (`link`, `partner`, `discount`).
	IncludeExpandedFields *bool `queryParam:"style=form,explode=true,name=includeExpandedFields"`
	// The field to sort the customers by. The default is `createdAt`.
	SortBy *GetCustomersSortBy `default:"createdAt" queryParam:"style=form,explode=true,name=sortBy"`
	// The sort order. The default is `desc`.
	SortOrder *GetCustomersSortOrder `default:"desc" queryParam:"style=form,explode=true,name=sortOrder"`
	// The page number for pagination.
	Page *float64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// The number of items per page.
	PageSize *float64 `default:"100" queryParam:"style=form,explode=true,name=pageSize"`
}

func (g GetCustomersRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetCustomersRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetCustomersRequest) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *GetCustomersRequest) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *GetCustomersRequest) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *GetCustomersRequest) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *GetCustomersRequest) GetLinkID() *string {
	if o == nil {
		return nil
	}
	return o.LinkID
}

func (o *GetCustomersRequest) GetIncludeExpandedFields() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeExpandedFields
}

func (o *GetCustomersRequest) GetSortBy() *GetCustomersSortBy {
	if o == nil {
		return nil
	}
	return o.SortBy
}

func (o *GetCustomersRequest) GetSortOrder() *GetCustomersSortOrder {
	if o == nil {
		return nil
	}
	return o.SortOrder
}

func (o *GetCustomersRequest) GetPage() *float64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *GetCustomersRequest) GetPageSize() *float64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

type GetCustomersLink struct {
	// The unique ID of the short link.
	ID string `json:"id"`
	// The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
	Domain string `json:"domain"`
	// The short link slug. If not provided, a random 7-character slug will be generated.
	Key string `json:"key"`
	// The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
	ShortLink string `json:"shortLink"`
	// The destination URL of the short link.
	URL string `json:"url"`
	// The ID of the program the short link is associated with.
	ProgramID *string `json:"programId"`
}

func (o *GetCustomersLink) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetCustomersLink) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *GetCustomersLink) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetCustomersLink) GetShortLink() string {
	if o == nil {
		return ""
	}
	return o.ShortLink
}

func (o *GetCustomersLink) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetCustomersLink) GetProgramID() *string {
	if o == nil {
		return nil
	}
	return o.ProgramID
}

type GetCustomersPartner struct {
	// The partner's unique ID on Dub.
	ID string `json:"id"`
	// The partner's full legal name.
	Name string `json:"name"`
	// The partner's email address. Should be a unique value across Dub.
	Email *string `json:"email"`
	// The partner's avatar image.
	Image *string `json:"image"`
}

func (o *GetCustomersPartner) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetCustomersPartner) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetCustomersPartner) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *GetCustomersPartner) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

type GetCustomersType string

const (
	GetCustomersTypePercentage GetCustomersType = "percentage"
	GetCustomersTypeFlat       GetCustomersType = "flat"
)

func (e GetCustomersType) ToPointer() *GetCustomersType {
	return &e
}
func (e *GetCustomersType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "percentage":
		fallthrough
	case "flat":
		*e = GetCustomersType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCustomersType: %v", v)
	}
}

type GetCustomersDiscount struct {
	ID            string           `json:"id"`
	Amount        float64          `json:"amount"`
	Type          GetCustomersType `json:"type"`
	MaxDuration   *float64         `json:"maxDuration"`
	Description   *string          `json:"description,omitempty"`
	CouponID      *string          `json:"couponId"`
	CouponTestID  *string          `json:"couponTestId"`
	PartnersCount *float64         `json:"partnersCount,omitempty"`
}

func (o *GetCustomersDiscount) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetCustomersDiscount) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetCustomersDiscount) GetType() GetCustomersType {
	if o == nil {
		return GetCustomersType("")
	}
	return o.Type
}

func (o *GetCustomersDiscount) GetMaxDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxDuration
}

func (o *GetCustomersDiscount) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetCustomersDiscount) GetCouponID() *string {
	if o == nil {
		return nil
	}
	return o.CouponID
}

func (o *GetCustomersDiscount) GetCouponTestID() *string {
	if o == nil {
		return nil
	}
	return o.CouponTestID
}

func (o *GetCustomersDiscount) GetPartnersCount() *float64 {
	if o == nil {
		return nil
	}
	return o.PartnersCount
}

type GetCustomersResponseBody struct {
	// The unique ID of the customer. You may use either the customer's `id` on Dub (obtained via `/customers` endpoint) or their `externalId` (unique ID within your system, prefixed with `ext_`, e.g. `ext_123`).
	ID string `json:"id"`
	// Unique identifier for the customer in the client's app.
	ExternalID string `json:"externalId"`
	// Name of the customer.
	Name string `json:"name"`
	// Email of the customer.
	Email *string `json:"email,omitempty"`
	// Avatar URL of the customer.
	Avatar *string `json:"avatar,omitempty"`
	// Country of the customer.
	Country *string `json:"country,omitempty"`
	// Total number of sales for the customer.
	Sales *float64 `json:"sales,omitempty"`
	// Total amount of sales for the customer.
	SaleAmount *float64 `json:"saleAmount,omitempty"`
	// The date the customer was created.
	CreatedAt string                `json:"createdAt"`
	Link      *GetCustomersLink     `json:"link,omitempty"`
	ProgramID *string               `json:"programId,omitempty"`
	Partner   *GetCustomersPartner  `json:"partner,omitempty"`
	Discount  *GetCustomersDiscount `json:"discount,omitempty"`
}

func (o *GetCustomersResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetCustomersResponseBody) GetExternalID() string {
	if o == nil {
		return ""
	}
	return o.ExternalID
}

func (o *GetCustomersResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetCustomersResponseBody) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *GetCustomersResponseBody) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *GetCustomersResponseBody) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *GetCustomersResponseBody) GetSales() *float64 {
	if o == nil {
		return nil
	}
	return o.Sales
}

func (o *GetCustomersResponseBody) GetSaleAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.SaleAmount
}

func (o *GetCustomersResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *GetCustomersResponseBody) GetLink() *GetCustomersLink {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *GetCustomersResponseBody) GetProgramID() *string {
	if o == nil {
		return nil
	}
	return o.ProgramID
}

func (o *GetCustomersResponseBody) GetPartner() *GetCustomersPartner {
	if o == nil {
		return nil
	}
	return o.Partner
}

func (o *GetCustomersResponseBody) GetDiscount() *GetCustomersDiscount {
	if o == nil {
		return nil
	}
	return o.Discount
}

type GetCustomersResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The list of customers.
	ResponseBodies []GetCustomersResponseBody
	// The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
	FourHundred *shared.FourHundred
	// Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
	FourHundredAndOne *shared.FourHundredAndOne
	// The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
	FourHundredAndThree *shared.FourHundredAndThree
	// The server cannot find the requested resource.
	FourHundredAndFour *shared.FourHundredAndFour
	// This response is sent when a request conflicts with the current state of the server.
	FourHundredAndNine *shared.FourHundredAndNine
	// This response is sent when the requested content has been permanently deleted from server, with no forwarding address.
	FourHundredAndTen *shared.FourHundredAndTen
	// The request was well-formed but was unable to be followed due to semantic errors.
	FourHundredAndTwentyTwo *shared.FourHundredAndTwentyTwo
	// The user has sent too many requests in a given amount of time ("rate limiting")
	FourHundredAndTwentyNine *shared.FourHundredAndTwentyNine
	// The server has encountered a situation it does not know how to handle.
	FiveHundred *shared.FiveHundred
}

func (o *GetCustomersResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetCustomersResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetCustomersResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetCustomersResponse) GetResponseBodies() []GetCustomersResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}

func (o *GetCustomersResponse) GetFourHundred() *shared.FourHundred {
	if o == nil {
		return nil
	}
	return o.FourHundred
}

func (o *GetCustomersResponse) GetFourHundredAndOne() *shared.FourHundredAndOne {
	if o == nil {
		return nil
	}
	return o.FourHundredAndOne
}

func (o *GetCustomersResponse) GetFourHundredAndThree() *shared.FourHundredAndThree {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThree
}

func (o *GetCustomersResponse) GetFourHundredAndFour() *shared.FourHundredAndFour {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFour
}

func (o *GetCustomersResponse) GetFourHundredAndNine() *shared.FourHundredAndNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndNine
}

func (o *GetCustomersResponse) GetFourHundredAndTen() *shared.FourHundredAndTen {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTen
}

func (o *GetCustomersResponse) GetFourHundredAndTwentyTwo() *shared.FourHundredAndTwentyTwo {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyTwo
}

func (o *GetCustomersResponse) GetFourHundredAndTwentyNine() *shared.FourHundredAndTwentyNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyNine
}

func (o *GetCustomersResponse) GetFiveHundred() *shared.FiveHundred {
	if o == nil {
		return nil
	}
	return o.FiveHundred
}
