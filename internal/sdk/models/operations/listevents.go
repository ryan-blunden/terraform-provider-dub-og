// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/models/shared"
	"net/http"
)

// ListEventsEvent - The type of event to retrieve analytics for. Defaults to 'clicks'.
type ListEventsEvent string

const (
	ListEventsEventClicks ListEventsEvent = "clicks"
	ListEventsEventLeads  ListEventsEvent = "leads"
	ListEventsEventSales  ListEventsEvent = "sales"
)

func (e ListEventsEvent) ToPointer() *ListEventsEvent {
	return &e
}
func (e *ListEventsEvent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "clicks":
		fallthrough
	case "leads":
		fallthrough
	case "sales":
		*e = ListEventsEvent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventsEvent: %v", v)
	}
}

// ListEventsInterval - The interval to retrieve analytics for. If undefined, defaults to 24h.
type ListEventsInterval string

const (
	ListEventsIntervalTwentyFourh ListEventsInterval = "24h"
	ListEventsIntervalSevend      ListEventsInterval = "7d"
	ListEventsIntervalThirtyd     ListEventsInterval = "30d"
	ListEventsIntervalNinetyd     ListEventsInterval = "90d"
	ListEventsIntervalOney        ListEventsInterval = "1y"
	ListEventsIntervalMtd         ListEventsInterval = "mtd"
	ListEventsIntervalQtd         ListEventsInterval = "qtd"
	ListEventsIntervalYtd         ListEventsInterval = "ytd"
	ListEventsIntervalAll         ListEventsInterval = "all"
)

func (e ListEventsInterval) ToPointer() *ListEventsInterval {
	return &e
}
func (e *ListEventsInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "24h":
		fallthrough
	case "7d":
		fallthrough
	case "30d":
		fallthrough
	case "90d":
		fallthrough
	case "1y":
		fallthrough
	case "mtd":
		fallthrough
	case "qtd":
		fallthrough
	case "ytd":
		fallthrough
	case "all":
		*e = ListEventsInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventsInterval: %v", v)
	}
}

// ListEventsTrigger - The trigger to retrieve analytics for. If undefined, return both QR and link clicks.
type ListEventsTrigger string

const (
	ListEventsTriggerQr   ListEventsTrigger = "qr"
	ListEventsTriggerLink ListEventsTrigger = "link"
)

func (e ListEventsTrigger) ToPointer() *ListEventsTrigger {
	return &e
}
func (e *ListEventsTrigger) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "qr":
		fallthrough
	case "link":
		*e = ListEventsTrigger(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventsTrigger: %v", v)
	}
}

type ListEventsTagIdsType string

const (
	ListEventsTagIdsTypeStr        ListEventsTagIdsType = "str"
	ListEventsTagIdsTypeArrayOfStr ListEventsTagIdsType = "arrayOfStr"
)

// ListEventsTagIds - The tag IDs to retrieve analytics for.
type ListEventsTagIds struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type ListEventsTagIdsType
}

func CreateListEventsTagIdsStr(str string) ListEventsTagIds {
	typ := ListEventsTagIdsTypeStr

	return ListEventsTagIds{
		Str:  &str,
		Type: typ,
	}
}

func CreateListEventsTagIdsArrayOfStr(arrayOfStr []string) ListEventsTagIds {
	typ := ListEventsTagIdsTypeArrayOfStr

	return ListEventsTagIds{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *ListEventsTagIds) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ListEventsTagIdsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ListEventsTagIdsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListEventsTagIds", string(data))
}

func (u ListEventsTagIds) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type ListEventsTagIds: all fields are null")
}

// ListEventsSortOrder - The sort order. The default is `desc`.
type ListEventsSortOrder string

const (
	ListEventsSortOrderAsc  ListEventsSortOrder = "asc"
	ListEventsSortOrderDesc ListEventsSortOrder = "desc"
)

func (e ListEventsSortOrder) ToPointer() *ListEventsSortOrder {
	return &e
}
func (e *ListEventsSortOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = ListEventsSortOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventsSortOrder: %v", v)
	}
}

// ListEventsSortBy - The field to sort the events by. The default is `timestamp`.
type ListEventsSortBy string

const (
	ListEventsSortByTimestamp ListEventsSortBy = "timestamp"
)

func (e ListEventsSortBy) ToPointer() *ListEventsSortBy {
	return &e
}
func (e *ListEventsSortBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "timestamp":
		*e = ListEventsSortBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventsSortBy: %v", v)
	}
}

// Order - DEPRECATED. Use `sortOrder` instead.
//
// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
type Order string

const (
	OrderAsc  Order = "asc"
	OrderDesc Order = "desc"
)

func (e Order) ToPointer() *Order {
	return &e
}
func (e *Order) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = Order(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Order: %v", v)
	}
}

type ListEventsRequest struct {
	// The type of event to retrieve analytics for. Defaults to 'clicks'.
	Event *ListEventsEvent `default:"clicks" queryParam:"style=form,explode=true,name=event"`
	// The domain to filter analytics for.
	Domain *string `queryParam:"style=form,explode=true,name=domain"`
	// The slug of the short link to retrieve analytics for. Must be used along with the corresponding `domain` of the short link to fetch analytics for a specific short link.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// The unique ID of the short link on Dub to retrieve analytics for.
	LinkID *string `queryParam:"style=form,explode=true,name=linkId"`
	// The ID of the link in the your database. Must be prefixed with 'ext_' when passed as a query parameter.
	ExternalID *string `queryParam:"style=form,explode=true,name=externalId"`
	// The ID of the tenant that created the link inside your system.
	TenantID *string `queryParam:"style=form,explode=true,name=tenantId"`
	// The ID of the program to retrieve analytics for.
	ProgramID *string `queryParam:"style=form,explode=true,name=programId"`
	// The ID of the partner to retrieve analytics for.
	PartnerID *string `queryParam:"style=form,explode=true,name=partnerId"`
	// The ID of the customer to retrieve analytics for.
	CustomerID *string `queryParam:"style=form,explode=true,name=customerId"`
	// The interval to retrieve analytics for. If undefined, defaults to 24h.
	Interval *ListEventsInterval `queryParam:"style=form,explode=true,name=interval"`
	// The start date and time when to retrieve analytics from. If set, takes precedence over `interval`.
	Start *string `queryParam:"style=form,explode=true,name=start"`
	// The end date and time when to retrieve analytics from. If not provided, defaults to the current date. If set along with `start`, takes precedence over `interval`.
	End *string `queryParam:"style=form,explode=true,name=end"`
	// The IANA time zone code for aligning timeseries granularity (e.g. America/New_York). Defaults to UTC.
	Timezone *string `default:"UTC" queryParam:"style=form,explode=true,name=timezone"`
	// The country to retrieve analytics for.
	Country *shared.CountryCode `queryParam:"style=form,explode=true,name=country"`
	// The city to retrieve analytics for.
	City *string `queryParam:"style=form,explode=true,name=city"`
	// The ISO 3166-2 region code to retrieve analytics for.
	Region *string `queryParam:"style=form,explode=true,name=region"`
	// The continent to retrieve analytics for.
	Continent *shared.ContinentCode `queryParam:"style=form,explode=true,name=continent"`
	// The device to retrieve analytics for.
	Device *string `queryParam:"style=form,explode=true,name=device"`
	// The browser to retrieve analytics for.
	Browser *string `queryParam:"style=form,explode=true,name=browser"`
	// The OS to retrieve analytics for.
	Os *string `queryParam:"style=form,explode=true,name=os"`
	// The trigger to retrieve analytics for. If undefined, return both QR and link clicks.
	Trigger *ListEventsTrigger `queryParam:"style=form,explode=true,name=trigger"`
	// The referer to retrieve analytics for.
	Referer *string `queryParam:"style=form,explode=true,name=referer"`
	// The full referer URL to retrieve analytics for.
	RefererURL *string `queryParam:"style=form,explode=true,name=refererUrl"`
	// The URL to retrieve analytics for.
	URL *string `queryParam:"style=form,explode=true,name=url"`
	// Deprecated. Use `tagIds` instead. The tag ID to retrieve analytics for.
	TagID *string `queryParam:"style=form,explode=true,name=tagId"`
	// The tag IDs to retrieve analytics for.
	TagIds *ListEventsTagIds `queryParam:"style=form,explode=true,name=tagIds"`
	// The folder ID to retrieve analytics for. If not provided, return analytics for unsorted links.
	FolderID *string `queryParam:"style=form,explode=true,name=folderId"`
	// Deprecated. Use the `trigger` field instead. Filter for QR code scans. If true, filter for QR codes only. If false, filter for links only. If undefined, return both.
	Qr *bool `queryParam:"style=form,explode=true,name=qr"`
	// Filter for root domains. If true, filter for domains only. If false, filter for links only. If undefined, return both.
	Root *bool `queryParam:"style=form,explode=true,name=root"`
	// The UTM source of the short link.
	UtmSource *string `queryParam:"style=form,explode=true,name=utm_source"`
	// The UTM medium of the short link.
	UtmMedium *string `queryParam:"style=form,explode=true,name=utm_medium"`
	// The UTM campaign of the short link.
	UtmCampaign *string `queryParam:"style=form,explode=true,name=utm_campaign"`
	// The UTM term of the short link.
	UtmTerm *string `queryParam:"style=form,explode=true,name=utm_term"`
	// The UTM content of the short link.
	UtmContent *string  `queryParam:"style=form,explode=true,name=utm_content"`
	Page       *float64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	Limit      *float64 `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// The sort order. The default is `desc`.
	SortOrder *ListEventsSortOrder `default:"desc" queryParam:"style=form,explode=true,name=sortOrder"`
	// The field to sort the events by. The default is `timestamp`.
	SortBy *ListEventsSortBy `default:"timestamp" queryParam:"style=form,explode=true,name=sortBy"`
	// DEPRECATED. Use `sortOrder` instead.
	Order *Order `default:"desc" queryParam:"style=form,explode=true,name=order"`
}

func (l ListEventsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListEventsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListEventsRequest) GetEvent() *ListEventsEvent {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *ListEventsRequest) GetDomain() *string {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *ListEventsRequest) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *ListEventsRequest) GetLinkID() *string {
	if o == nil {
		return nil
	}
	return o.LinkID
}

func (o *ListEventsRequest) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *ListEventsRequest) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *ListEventsRequest) GetProgramID() *string {
	if o == nil {
		return nil
	}
	return o.ProgramID
}

func (o *ListEventsRequest) GetPartnerID() *string {
	if o == nil {
		return nil
	}
	return o.PartnerID
}

func (o *ListEventsRequest) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *ListEventsRequest) GetInterval() *ListEventsInterval {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *ListEventsRequest) GetStart() *string {
	if o == nil {
		return nil
	}
	return o.Start
}

func (o *ListEventsRequest) GetEnd() *string {
	if o == nil {
		return nil
	}
	return o.End
}

func (o *ListEventsRequest) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *ListEventsRequest) GetCountry() *shared.CountryCode {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *ListEventsRequest) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *ListEventsRequest) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *ListEventsRequest) GetContinent() *shared.ContinentCode {
	if o == nil {
		return nil
	}
	return o.Continent
}

func (o *ListEventsRequest) GetDevice() *string {
	if o == nil {
		return nil
	}
	return o.Device
}

func (o *ListEventsRequest) GetBrowser() *string {
	if o == nil {
		return nil
	}
	return o.Browser
}

func (o *ListEventsRequest) GetOs() *string {
	if o == nil {
		return nil
	}
	return o.Os
}

func (o *ListEventsRequest) GetTrigger() *ListEventsTrigger {
	if o == nil {
		return nil
	}
	return o.Trigger
}

func (o *ListEventsRequest) GetReferer() *string {
	if o == nil {
		return nil
	}
	return o.Referer
}

func (o *ListEventsRequest) GetRefererURL() *string {
	if o == nil {
		return nil
	}
	return o.RefererURL
}

func (o *ListEventsRequest) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *ListEventsRequest) GetTagID() *string {
	if o == nil {
		return nil
	}
	return o.TagID
}

func (o *ListEventsRequest) GetTagIds() *ListEventsTagIds {
	if o == nil {
		return nil
	}
	return o.TagIds
}

func (o *ListEventsRequest) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

func (o *ListEventsRequest) GetQr() *bool {
	if o == nil {
		return nil
	}
	return o.Qr
}

func (o *ListEventsRequest) GetRoot() *bool {
	if o == nil {
		return nil
	}
	return o.Root
}

func (o *ListEventsRequest) GetUtmSource() *string {
	if o == nil {
		return nil
	}
	return o.UtmSource
}

func (o *ListEventsRequest) GetUtmMedium() *string {
	if o == nil {
		return nil
	}
	return o.UtmMedium
}

func (o *ListEventsRequest) GetUtmCampaign() *string {
	if o == nil {
		return nil
	}
	return o.UtmCampaign
}

func (o *ListEventsRequest) GetUtmTerm() *string {
	if o == nil {
		return nil
	}
	return o.UtmTerm
}

func (o *ListEventsRequest) GetUtmContent() *string {
	if o == nil {
		return nil
	}
	return o.UtmContent
}

func (o *ListEventsRequest) GetPage() *float64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListEventsRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListEventsRequest) GetSortOrder() *ListEventsSortOrder {
	if o == nil {
		return nil
	}
	return o.SortOrder
}

func (o *ListEventsRequest) GetSortBy() *ListEventsSortBy {
	if o == nil {
		return nil
	}
	return o.SortBy
}

func (o *ListEventsRequest) GetOrder() *Order {
	if o == nil {
		return nil
	}
	return o.Order
}

type ListEventsResponseBodyType string

const (
	ListEventsResponseBodyTypeClick ListEventsResponseBodyType = "click"
	ListEventsResponseBodyTypeLead  ListEventsResponseBodyType = "lead"
	ListEventsResponseBodyTypeSale  ListEventsResponseBodyType = "sale"
)

type ListEventsResponseBody struct {
	ClickEvent *shared.ClickEvent `queryParam:"inline"`
	LeadEvent  *shared.LeadEvent  `queryParam:"inline"`
	SaleEvent  *shared.SaleEvent  `queryParam:"inline"`

	Type ListEventsResponseBodyType
}

func CreateListEventsResponseBodyClick(click shared.ClickEvent) ListEventsResponseBody {
	typ := ListEventsResponseBodyTypeClick

	typStr := shared.ClickEventEvent(typ)
	click.Event = typStr

	return ListEventsResponseBody{
		ClickEvent: &click,
		Type:       typ,
	}
}

func CreateListEventsResponseBodyLead(lead shared.LeadEvent) ListEventsResponseBody {
	typ := ListEventsResponseBodyTypeLead

	typStr := shared.LeadEventEvent(typ)
	lead.Event = typStr

	return ListEventsResponseBody{
		LeadEvent: &lead,
		Type:      typ,
	}
}

func CreateListEventsResponseBodySale(sale shared.SaleEvent) ListEventsResponseBody {
	typ := ListEventsResponseBodyTypeSale

	typStr := shared.SaleEventEvent(typ)
	sale.Event = typStr

	return ListEventsResponseBody{
		SaleEvent: &sale,
		Type:      typ,
	}
}

func (u *ListEventsResponseBody) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Event string `json:"event"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Event {
	case "click":
		clickEvent := new(shared.ClickEvent)
		if err := utils.UnmarshalJSON(data, &clickEvent, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Event == click) type shared.ClickEvent within ListEventsResponseBody: %w", string(data), err)
		}

		u.ClickEvent = clickEvent
		u.Type = ListEventsResponseBodyTypeClick
		return nil
	case "lead":
		leadEvent := new(shared.LeadEvent)
		if err := utils.UnmarshalJSON(data, &leadEvent, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Event == lead) type shared.LeadEvent within ListEventsResponseBody: %w", string(data), err)
		}

		u.LeadEvent = leadEvent
		u.Type = ListEventsResponseBodyTypeLead
		return nil
	case "sale":
		saleEvent := new(shared.SaleEvent)
		if err := utils.UnmarshalJSON(data, &saleEvent, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Event == sale) type shared.SaleEvent within ListEventsResponseBody: %w", string(data), err)
		}

		u.SaleEvent = saleEvent
		u.Type = ListEventsResponseBodyTypeSale
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListEventsResponseBody", string(data))
}

func (u ListEventsResponseBody) MarshalJSON() ([]byte, error) {
	if u.ClickEvent != nil {
		return utils.MarshalJSON(u.ClickEvent, "", true)
	}

	if u.LeadEvent != nil {
		return utils.MarshalJSON(u.LeadEvent, "", true)
	}

	if u.SaleEvent != nil {
		return utils.MarshalJSON(u.SaleEvent, "", true)
	}

	return nil, errors.New("could not marshal union type ListEventsResponseBody: all fields are null")
}

type ListEventsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A list of events
	ResponseBodies []ListEventsResponseBody
	// The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
	FourHundred *shared.FourHundred
	// Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
	FourHundredAndOne *shared.FourHundredAndOne
	// The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
	FourHundredAndThree *shared.FourHundredAndThree
	// The server cannot find the requested resource.
	FourHundredAndFour *shared.FourHundredAndFour
	// This response is sent when a request conflicts with the current state of the server.
	FourHundredAndNine *shared.FourHundredAndNine
	// This response is sent when the requested content has been permanently deleted from server, with no forwarding address.
	FourHundredAndTen *shared.FourHundredAndTen
	// The request was well-formed but was unable to be followed due to semantic errors.
	FourHundredAndTwentyTwo *shared.FourHundredAndTwentyTwo
	// The user has sent too many requests in a given amount of time ("rate limiting")
	FourHundredAndTwentyNine *shared.FourHundredAndTwentyNine
	// The server has encountered a situation it does not know how to handle.
	FiveHundred *shared.FiveHundred
}

func (o *ListEventsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListEventsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListEventsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListEventsResponse) GetResponseBodies() []ListEventsResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}

func (o *ListEventsResponse) GetFourHundred() *shared.FourHundred {
	if o == nil {
		return nil
	}
	return o.FourHundred
}

func (o *ListEventsResponse) GetFourHundredAndOne() *shared.FourHundredAndOne {
	if o == nil {
		return nil
	}
	return o.FourHundredAndOne
}

func (o *ListEventsResponse) GetFourHundredAndThree() *shared.FourHundredAndThree {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThree
}

func (o *ListEventsResponse) GetFourHundredAndFour() *shared.FourHundredAndFour {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFour
}

func (o *ListEventsResponse) GetFourHundredAndNine() *shared.FourHundredAndNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndNine
}

func (o *ListEventsResponse) GetFourHundredAndTen() *shared.FourHundredAndTen {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTen
}

func (o *ListEventsResponse) GetFourHundredAndTwentyTwo() *shared.FourHundredAndTwentyTwo {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyTwo
}

func (o *ListEventsResponse) GetFourHundredAndTwentyNine() *shared.FourHundredAndTwentyNine {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyNine
}

func (o *ListEventsResponse) GetFiveHundred() *shared.FiveHundred {
	if o == nil {
		return nil
	}
	return o.FiveHundred
}
